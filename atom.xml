<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James&#39;s blog</title>
  
  
  <link href="https://liting1024.github.io/atom.xml" rel="self"/>
  
  <link href="https://liting1024.github.io/"/>
  <updated>2021-05-27T14:44:37.000Z</updated>
  <id>https://liting1024.github.io/</id>
  
  <author>
    <name>舒克</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图像识别</title>
    <link href="https://liting1024.github.io/2021/05/27/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    <id>https://liting1024.github.io/2021/05/27/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</id>
    <published>2021-05-27T14:44:37.000Z</published>
    <updated>2021-05-27T14:44:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h1><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><p>语义鸿沟：图像的底层视觉特性和高层语义概念之间的鸿沟</p><h2 id="传统图像识别"><a href="#传统图像识别" class="headerlink" title="传统图像识别"></a>传统图像识别</h2><h3 id="早期"><a href="#早期" class="headerlink" title="早期"></a>早期</h3><p>特征提取：颜色 + 形状 + 纹理 （向量）</p><p>特征变换（向量化）：提高特征表示性能 embedding/manifold learning</p><p>索引：穷举、最近邻居 KD-Tree、LSH、二进制哈希编码</p><p>相关反馈：Explicit feedback 反馈正例或负例 </p><p>​                        Implicit feedback 根据可观察行为推断用户意图</p><h3 id="中期"><a href="#中期" class="headerlink" title="中期"></a>中期</h3><p>词袋模型</p><p>特征提取：特征检测子检测图像区块中心的位置，特征描述子描述区块的视觉内容</p><p>特征变换（向量化）：生成视觉词典，通过概率学计算视觉关键词</p><p>索引：倒排索引</p><p>后处理：局部几何验证、若空间关系验证、成绩向量化</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图像识别&quot;&gt;&lt;a href=&quot;#图像识别&quot; class=&quot;headerlink&quot; title=&quot;图像识别&quot;&gt;&lt;/a&gt;图像识别&lt;/h1&gt;&lt;h2 id=&quot;图像&quot;&gt;&lt;a href=&quot;#图像&quot; class=&quot;headerlink&quot; title=&quot;图像&quot;&gt;&lt;/a&gt;图像&lt;/h</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
  </entry>
  
  <entry>
    <title>基础算法</title>
    <link href="https://liting1024.github.io/2021/05/27/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>https://liting1024.github.io/2021/05/27/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</id>
    <published>2021-05-27T14:43:44.000Z</published>
    <updated>2021-05-27T14:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>编译器优化</p><p>-O0 表示无优化状态<br>-O1 表示对代码进行了优化<br>-O2 表示减小目标文件大小<br>-O3 表示减小代码段及栈空间的大小<br>#pragma GCC optimize (“O0”)</p><p>爆栈</p><p>#pragma comment(linker, “/STACK:1024000000,1024000000”)</p><h2 id="快读快出"><a href="#快读快出" class="headerlink" title="快读快出"></a>快读快出</h2><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><p>scanf(“%控制格式”, &amp;变量地址); 对于数组 变量本身就是地址</p><table><thead><tr><th align="center">格式</th><th align="center">字符意义</th></tr></thead><tbody><tr><td align="center">d</td><td align="center">十进制整数</td></tr><tr><td align="center">o</td><td align="center">八进制整数</td></tr><tr><td align="center">x</td><td align="center">十六进制整数</td></tr><tr><td align="center">u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">f或e</td><td align="center">实型数(用小数形式或指数形式)</td></tr><tr><td align="center">c</td><td align="center">单个字符</td></tr><tr><td align="center">s</td><td align="center">字符串</td></tr><tr><td align="center">l/h</td><td align="center">l表示长，h表示短，Eg：lf 读入doble</td></tr><tr><td align="center">*</td><td align="center">读入不赋值，EG：*d 读入int但不赋值</td></tr><tr><td align="center">5（数字）</td><td align="center">读入宽度</td></tr><tr><td align="center">-/+</td><td align="center">左/右对齐</td></tr><tr><td align="center">#</td><td align="center">需要时给出小数点和前缀o或 0x</td></tr><tr><td align="center">空格</td><td align="center">需要时显示正负号</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><p>没有精度控制 scanf(“%5.2f”,&amp;a);是非法的</p><p>要求给出变量地址 scanf(“%d”,a);是非法的</p><p>在碰到空格，TAB，回车或非法数据时认为该数据结束</p><h3 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h3><p>printf(“%控制格式”, 变量本身);</p><p>%a(%A)     浮点数、十六进制数字和p-(P-)记数法(C99)<br>      %c         字符<br>      %d         有符号十进制整数<br>      %f         浮点数(包括float和double)<br>      %e(%E)     浮点数指数输出[e-(E-)记数法]<br>      %g(%G)     浮点数不显无意义的零”0”<br>      %i         有符号十进制整数(与%d相同)<br>      %u         无符号十进制整数<br>      %x(%X)     十六进制整数0f(0F)   e.g.   0x1234<br>      %p         指针<br>      %%         “%”</p><h3 id="读入空格"><a href="#读入空格" class="headerlink" title="读入空格"></a>读入空格</h3><p>cin.get(x) 读入单个char</p><p>x = getchar( ) 读入单个char，对应putchar( ) 输出单个char</p><p>getline(x) 读入string</p><h3 id="内联函数read"><a href="#内联函数read" class="headerlink" title="内联函数read"></a>内联函数read</h3><p>内联是将代码内嵌到调用者代码处</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">inline int read()</span><br><span class="line">&#123;</span><br><span class="line">    int s&#x3D;0,w&#x3D;1;&#x2F;&#x2F;s是数值，w是符号</span><br><span class="line">    char ch&#x3D;getchar();</span><br><span class="line">    while(ch&lt;&#39;0&#39;||ch&gt;&#39;9&#39;)&#x2F;&#x2F;将空格、换行与符号滤去</span><br><span class="line">    &#123;</span><br><span class="line">        if(ch&#x3D;&#x3D;&#39;-&#39;)&#x2F;&#x2F;出现负号表示是负数</span><br><span class="line">        &#123;</span><br><span class="line">            w&#x3D;-1;</span><br><span class="line">            ch&#x3D;getchar();&#x2F;&#x2F;继续读入</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while(ch&gt;&#x3D;&#39;0&#39;&amp;&amp;ch&lt;&#x3D;&#39;9&#39;)&#x2F;&#x2F;循环读取每一位的数字</span><br><span class="line">    &#123;</span><br><span class="line">        s&#x3D;s*10+ch-&#39;0&#39;;&#x2F;&#x2F;将每一位的结果累加进s</span><br><span class="line">        ch&#x3D;getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    return s*w;&#x2F;&#x2F;乘上符号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快速排序-分治"><a href="#快速排序-分治" class="headerlink" title="快速排序 - 分治"></a>快速排序 - 分治</h3><ol><li><p>确定分界：q[l], q[(l + r) / 2], q[r], 随机点 </p></li><li><p>调整区间：小于分界点的在左区间，其余在右区间 </p><p>​    使用两个数组作为左右区间</p><p>​    使用两个指针（i = l - 1，j = r + 1），如果a[i]&gt;x,a[i]&lt;x，交换a[i] a[j]</p></li><li><p>递归：给左右排序 </p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(q, l, j); quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序-分治（稳定）"><a href="#归并排序-分治（稳定）" class="headerlink" title="归并排序 - 分治（稳定）"></a>归并排序 - 分治（稳定）</h3><ol><li>确定分界点 mid = (l + r) / 2 </li><li>递归排序</li><li>归并两个有序数组（两个指针遍历两个数组，小的放入新数组）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">void merge_sort(int q[], int l, int r)&#123;</span><br><span class="line">    if (l &gt;&#x3D; r) return;</span><br><span class="line"></span><br><span class="line">    int mid &#x3D; l + r &gt;&gt; 1;</span><br><span class="line">    merge_sort(q, l, mid);merge_sort(q, mid + 1, r);</span><br><span class="line"></span><br><span class="line">    int k &#x3D; 0, i &#x3D; l, j &#x3D; mid + 1;</span><br><span class="line">    while (i &lt;&#x3D; mid &amp;&amp; j &lt;&#x3D; r)</span><br><span class="line">        if (q[i] &lt;&#x3D; q[j]) tmp[k ++ ] &#x3D; q[i ++ ];</span><br><span class="line">        else tmp[k ++ ] &#x3D; q[j ++ ];</span><br><span class="line"></span><br><span class="line">    while (i &lt;&#x3D; mid) tmp[k ++ ] &#x3D; q[i ++ ];</span><br><span class="line">    while (j &lt;&#x3D; r) tmp[k ++ ] &#x3D; q[j ++ ];</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; l, j &#x3D; 0; i &lt;&#x3D; r; i ++, j ++ ) q[i] &#x3D; tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><p>有单调性 一定可以 二分</p><p>求范围，让答案在收缩的区间里</p><p>向左收缩和向右收缩mid的取值不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bool check(int x) &#123;&#125; &#x2F;&#x2F; 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：向左收缩</span><br><span class="line">int bsearch_1(int l, int r) &#123;</span><br><span class="line">    while (l &lt; r) &#123;</span><br><span class="line">        int mid &#x3D; l + r &gt;&gt; 1;</span><br><span class="line">        if (check(mid)) r &#x3D; mid;    &#x2F;&#x2F; check()判断mid是否满足性质</span><br><span class="line">        else l &#x3D; mid + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：向右收缩</span><br><span class="line">int bsearch_2(int l, int r) &#123;</span><br><span class="line">    while (l &lt; r) &#123;</span><br><span class="line">        int mid &#x3D; l + r + 1 &gt;&gt; 1;&#x2F;&#x2F;防止死循环 多加1</span><br><span class="line">        if (check(mid)) l &#x3D; mid;</span><br><span class="line">        else r &#x3D; mid - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 对于浮点数 将while里停止的条件改为 r - l &gt; 1e-6</p><p>while控制的精度最好小于输出保留位数两位，防止精度不够</p><p>Eg：输出小数点后四位，这里控制为1e-6</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool check(double x) &#123;&#125; &#x2F;&#x2F; 检查x是否满足某种性质</span><br><span class="line"></span><br><span class="line">double bsearch_3(double l, double r) &#123;</span><br><span class="line">    const double eps &#x3D; 1e-6;   &#x2F;&#x2F; eps 表示精度，取决于题目对精度的要求</span><br><span class="line">    while (r - l &gt; eps) &#123;</span><br><span class="line">        double mid &#x3D; (l + r) &#x2F; 2;</span><br><span class="line">        if (check(mid)) r &#x3D; mid;</span><br><span class="line">        else l &#x3D; mid;</span><br><span class="line">    &#125;</span><br><span class="line">    return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度（C-）"><a href="#高精度（C-）" class="headerlink" title="高精度（C++）"></a>高精度（C++）</h2><p>用数组存大整数，低地址存低位（小端），0存个位</p><h3 id="大数相加"><a href="#大数相加" class="headerlink" title="大数相加"></a>大数相加</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; C &#x3D; A + B, A &gt;&#x3D; 0, B &gt;&#x3D; 0</span><br><span class="line">vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B) &#123;</span><br><span class="line">    if (A.size() &lt; B.size()) return add(B, A);</span><br><span class="line"></span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line">    int t &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; A.size(); i ++ ) &#123;</span><br><span class="line">        t +&#x3D; A[i];</span><br><span class="line">        if (i &lt; B.size()) t +&#x3D; B[i];</span><br><span class="line">        C.push_back(t % 10);</span><br><span class="line">        t &#x2F;&#x3D; 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (t) C.push_back(t);</span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大数相减"><a href="#大数相减" class="headerlink" title="大数相减"></a>大数相减</h3><p>A &lt; B =&gt; -(B - A) </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span> </span>&#123; <span class="comment">//引用 节省时间</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ ) &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大数乘小数"><a href="#大数乘小数" class="headerlink" title="大数乘小数"></a>大数乘小数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; C &#x3D; A * b, A &gt;&#x3D; 0, b &gt;&#x3D; 0</span><br><span class="line">vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b) &#123;</span><br><span class="line">    vector&lt;int&gt; C;</span><br><span class="line"></span><br><span class="line">    for (int i &#x3D; 0, t &#x3D; 0; i &lt; A.size() || t; i ++ ) &#123;</span><br><span class="line">        if (i &lt; A.size()) t +&#x3D; A[i] * b;</span><br><span class="line">        C.push_back(t % 10);</span><br><span class="line">        t &#x2F;&#x3D; 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();</span><br><span class="line"></span><br><span class="line">    return C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大数除以小数"><a href="#大数除以小数" class="headerlink" title="大数除以小数"></a>大数除以小数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; A &#x2F; b &#x3D; C ... r, A &gt;&#x3D; 0, b &gt; 0vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r) &#123;    vector&lt;int&gt; C;    r &#x3D; 0;    for (int i &#x3D; A.size() - 1; i &gt;&#x3D; 0; i -- ) &#123;        r &#x3D; r * 10 + A[i];        C.push_back(r &#x2F; b);        r %&#x3D; b;    &#125;    reverse(C.begin(), C.end());    while (C.size() &gt; 1 &amp;&amp; C.back() &#x3D;&#x3D; 0) C.pop_back();    return C;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编译器优化&lt;/p&gt;
&lt;p&gt;-O0 表示无优化状态&lt;br&gt;-O1 表示对代码进行了优化&lt;br&gt;-O2 表示减小目标文件大小&lt;br&gt;-O3 表示减小代码段及栈空间的大小&lt;br&gt;#pragma GCC optimize (“O0”)&lt;/p&gt;
&lt;p&gt;爆栈&lt;/p&gt;
&lt;p&gt;#pragm</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="C++" scheme="https://liting1024.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>vim</title>
    <link href="https://liting1024.github.io/2021/03/02/vim/"/>
    <id>https://liting1024.github.io/2021/03/02/vim/</id>
    <published>2021-03-02T12:07:21.000Z</published>
    <updated>2021-03-02T12:07:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分页与导航"><a href="#分页与导航" class="headerlink" title="分页与导航"></a>分页与导航</h1><p>在不关闭的情况下开启其他档案<br>:e 档案名称<br>:e.<br>同时开启多个文档<br>:tabe 档案名称<br>:tabe.<br>下一个分页<br>gt<br>上一个分页<br>gT</p><h1 id="光标移动定位"><a href="#光标移动定位" class="headerlink" title="光标移动定位"></a>光标移动定位</h1><p>hjkl 左下上右 建议改为aswd<br>num j 向下移动num行<br>页面低端 G<br>页面顶端 gg</p><h1 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h1><p>向下半页 control+d<br>向上半页 control+u<br>向下整页 control+f<br>向上整页 control+b<br>向下一行 control+e<br>向上一行 control+y</p><h1 id="光标定位"><a href="#光标定位" class="headerlink" title="光标定位"></a>光标定位</h1><p>置中 zz<br>行首 zt<br>行尾 zb<br>最上一行 H<br>最下一行 L<br>定位到num行<br>:num<br>num G</p><h1 id="查找指令"><a href="#查找指令" class="headerlink" title="查找指令"></a>查找指令</h1><p>下一个 n<br>上一个 N </p><h1 id="水平移动"><a href="#水平移动" class="headerlink" title="水平移动"></a>水平移动</h1><p>最后 $<br>最前 0<br>该行文字最前 ^<br>该行文字最后 g_<br>单字开头 W<br>单字结尾 E<br>上一个字开头 B<br>移动到字符x fx<br>字符前一格x tx<br>反向移动到字符 F<br>反向移动到字符后一格 T</p><p>重复上次的查找指令 ;</p><h1 id="插入指令"><a href="#插入指令" class="headerlink" title="插入指令"></a>插入指令</h1><h2 id="进入插入模式指令"><a href="#进入插入模式指令" class="headerlink" title="进入插入模式指令"></a>进入插入模式指令</h2><p>光标位置 i<br>当前行首 I<br>当前行尾 A<br>光标后方进入插入模式 a<br>光标上一行 O<br>光标下方进入插入模式 o</p><h2 id="取代文字"><a href="#取代文字" class="headerlink" title="取代文字"></a>取代文字</h2><p>取代字符 s<br>取代整行文字 S<br>取代到行尾 C<br>替换一个单词 cw<br>替换到结尾的文字 c$<br>替换到第一个引号 cf”</p><h2 id="退出插入模式"><a href="#退出插入模式" class="headerlink" title="退出插入模式"></a>退出插入模式</h2><p>control+[</p><p>#普通模式下的编辑指令<br>删除字元 x<br>删除前一个 X<br>取代当前字元为1 r1<br>取代模式 R</p><p>删除单行文字 dd<br>拷贝单行文字 yy<br>粘贴上文字  p或P</p><p>缩排文字 &gt;&gt;<br>反向缩排文字 &lt;&lt;</p><p>重复上一次的指令动作 .<br>恢复 u<br>重做 control+r<br>一次性恢复单行指令 U</p><p>数字变化<br>递增 control+a<br>递减 control+x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分页与导航&quot;&gt;&lt;a href=&quot;#分页与导航&quot; class=&quot;headerlink&quot; title=&quot;分页与导航&quot;&gt;&lt;/a&gt;分页与导航&lt;/h1&gt;&lt;p&gt;在不关闭的情况下开启其他档案&lt;br&gt;:e 档案名称&lt;br&gt;:e.&lt;br&gt;同时开启多个文档&lt;br&gt;:tabe 档案名称</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>FM、FFM</title>
    <link href="https://liting1024.github.io/2021/02/20/FM%E3%80%81FFM/"/>
    <id>https://liting1024.github.io/2021/02/20/FM%E3%80%81FFM/</id>
    <published>2021-02-20T01:03:03.000Z</published>
    <updated>2021-02-20T01:03:03.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Numpy</title>
    <link href="https://liting1024.github.io/2021/02/11/Numpy/"/>
    <id>https://liting1024.github.io/2021/02/11/Numpy/</id>
    <published>2021-02-11T04:11:11.000Z</published>
    <updated>2021-02-11T04:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy科学计算库"><a href="#Numpy科学计算库" class="headerlink" title="Numpy科学计算库"></a>Numpy科学计算库</h1><p>数组中所有数据类型必须一致</p><h2 id="导入Numpy库"><a href="#导入Numpy库" class="headerlink" title="导入Numpy库"></a>导入Numpy库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np </span><br><span class="line">#调用函数时需要np.</span><br><span class="line">from numpy import *</span><br></pre></td></tr></table></figure><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; arrary([列表]&#x2F;(元组))</span><br><span class="line">print(a.ndim)</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ndim</td><td align="center">维数</td></tr><tr><td align="center">shape</td><td align="center">形状</td></tr><tr><td align="center">size</td><td align="center">元素个数</td></tr><tr><td align="center">dtype</td><td align="center">元素的数据类型</td></tr><tr><td align="center">itemsize</td><td align="center">元素的字节数</td></tr></tbody></table><h3 id="特殊数组"><a href="#特殊数组" class="headerlink" title="特殊数组"></a>特殊数组</h3><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>np.arange(起始数字, 结束数字, 步长, dtype)</td><td>数字序列</td></tr><tr><td>np.ones(shape, dtype)</td><td>全1</td></tr><tr><td>np.zeros(shape, dtype)</td><td>全0</td></tr><tr><td>np.eye(shape, dtype)</td><td>单位矩阵</td></tr><tr><td>np.linspace(start, stop, num, dtype)</td><td>等差数列</td></tr><tr><td>np.logspace(start, stop, num, base, dtype)</td><td>等比数列</td></tr><tr><td>asarray</td><td>转换列表元组为数组</td></tr></tbody></table><h2 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h2><p>切片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; np.array([0,1,2,3])</span><br><span class="line">print(a[0:3]) </span><br><span class="line">#0,1,2</span><br></pre></td></tr></table></figure><p>改变形状</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Numpy科学计算库&quot;&gt;&lt;a href=&quot;#Numpy科学计算库&quot; class=&quot;headerlink&quot; title=&quot;Numpy科学计算库&quot;&gt;&lt;/a&gt;Numpy科学计算库&lt;/h1&gt;&lt;p&gt;数组中所有数据类型必须一致&lt;/p&gt;
&lt;h2 id=&quot;导入Numpy库&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="Python" scheme="https://liting1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow</title>
    <link href="https://liting1024.github.io/2021/01/08/tensorflow/"/>
    <id>https://liting1024.github.io/2021/01/08/tensorflow/</id>
    <published>2021-01-08T09:36:10.000Z</published>
    <updated>2021-01-08T09:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>简化API，用Keras和eager execution构造模型</p><h1 id="tf-keras概述"><a href="#tf-keras概述" class="headerlink" title="tf.keras概述"></a>tf.keras概述</h1><p>tf.kears：允许创建复杂的拓扑，包括使用残差层、自定义多输入输出模型以及强制编写的正向传递</p><p>构建和训练模型的核心API</p><p>单输入单输出Sequential顺序模型</p><p>函数式API</p><p>Eager模式与自定义训练</p><p>直接迭代和直观调试</p><p>tf.GradientTape 求解梯度，自定义训练逻辑</p><p>tf.data 加载图片数据与结构化数据</p><p>tf.funcion 自动图运算</p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>f(x)=ax+b 算出来的f与实际的f的均方差越小越好，使用梯度下降算法优化以选取合适的a和b</p><h3 id="tf-kears实现"><a href="#tf-kears实现" class="headerlink" title="tf.kears实现"></a>tf.kears实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.Sequential() #顺序模型</span><br><span class="line">model.add(tf.keras.layers.Dense(1, input_shape&#x3D;(1,))) </span><br><span class="line">#添加层，输出 输入维度是1</span><br><span class="line">model.complie(optimizer&#x3D;&#39;adam&#39;,loss&#x3D;&#39;mse&#39;)</span><br><span class="line">#优化方法是adam，优化的loss函数是均方差函数</span><br><span class="line">history &#x3D; model.fit(x, y, epochs&#x3D;500)</span><br><span class="line">#用history记录训练记录，训练次数为500</span><br><span class="line">model.predict(pd.Series[20]) #输入为20时预测输出</span><br></pre></td></tr></table></figure><h2 id="梯度下降算法"><a href="#梯度下降算法" class="headerlink" title="梯度下降算法"></a>梯度下降算法</h2><p>寻找合适的a和b使 (f-y)^2/n 最小</p><p>随机初始化a和b，然后左右移动寻找极值点</p><p>输出是一个若干偏导数构成的向量，每个分量对应函数对输入向量的相应分量的偏导</p><p>表明每个位置上损失函数增长最快的方向</p><h2 id="多层感知器（神经网络）"><a href="#多层感知器（神经网络）" class="headerlink" title="多层感知器（神经网络）"></a>多层感知器（神经网络）</h2><p>根据权重求和达到激活后输出</p><p>深度学习：层数更多，使用多层感知器 </p><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>激活：信号达到 一定强度才输出</p><p>relu</p><p>sigmoid 一般处理逻辑回归问题（0和1）</p><p>tanh</p><p>Leak relu</p><h3 id="tf-keras实现"><a href="#tf-keras实现" class="headerlink" title="tf.keras实现"></a>tf.keras实现</h3><p>广告在TV radio newspaper上投放后的销量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential([</span><br><span class="line">tf.keras.layers.Dense(<span class="number">10</span>, input_shape=(<span class="number">3</span>,), activation=<span class="string">'relu'</span>)</span><br><span class="line">  <span class="comment">#10个隐藏单元，三维输入，激活函数为relu</span></span><br><span class="line">  tf.keras.layers.Dense(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">#输出为1维</span></span><br><span class="line">])</span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,loss=<span class="string">'mse'</span>)</span><br><span class="line">model.fit(x, y, epoch=<span class="number">100</span>)</span><br><span class="line">model.predict(data.iloc[:<span class="number">10</span>,<span class="number">-1</span>]) <span class="comment">#前十行</span></span><br></pre></td></tr></table></figure><h1 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h1><p>概率分布函数：给定输入时输出一个概率值</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>交叉熵损失函数：实际输出与期望输出之间的差距，放大了损失</p><p>binary_crossentropy</p><p>$H(p,q)=-\Sigma p(x)logq(x)$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">model &#x3D; tf.keras.Sequential()</span><br><span class="line">model.add(tf.keras.layers.Dense(4, input_shape&#x3D;(15,), activation&#x3D;&#39;relu&#39;))</span><br><span class="line">model.add(tf.keras.layers.Dense(4, activation&#x3D;&#39;relu&#39;))</span><br><span class="line">model.add(tf.keras.layers.Dense(1, activation&#x3D;&#39;sigmoid&#39;))</span><br><span class="line">#添加两层输入层，第二层自动推断输入；输出层使用sigmoid激活</span><br><span class="line">model.compile(optimizer&#x3D;&#39;adam&#39;,</span><br><span class="line">loss&#x3D;&#39;binary_crossentropy&#39;,</span><br><span class="line">mentrics&#x3D;[&#39;acc&#39;]</span><br><span class="line">)</span><br><span class="line">#用交叉熵做损失函数，metrics计算正确率</span><br><span class="line">history &#x3D; model.fit(x, y, epochs&#x3D;100)</span><br></pre></td></tr></table></figure><h2 id="softmax多分类"><a href="#softmax多分类" class="headerlink" title="softmax多分类"></a>softmax多分类</h2><p>对多个选项的问题（A B C D）</p><p>样本分量之和为1</p><p>交叉熵：categorical_crossentropy和sparse_categorical_crossentropy</p><p>Fashion MNIST数据集：日常物品的灰度图像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fashin_mnist &#x3D; tf.keras.datasets.fashion_mnist.load_data()</span><br><span class="line">(train_image, train_lable), (test_image, test_label) &#x3D;  tf.keras.datasets.fashion.load</span><br><span class="line">#加载数据</span><br><span class="line">train_image &#x3D; train_image&#x2F;255 #数据归一化</span><br><span class="line">test_image &#x3D; test_image&#x2F;255</span><br><span class="line">model &#x3D; tf.keras.Sequential()</span><br><span class="line">model.add(tf.keras.layers.Flatten(input_shape&#x3D;(28,28)))</span><br><span class="line"># 28*28的向量</span><br><span class="line">model.add(tf.keras.layers.Dense(128, activation&#x3D;&#39;relu&#39;))</span><br><span class="line">model.add(tf.keras.layers.Dense(10, activation&#x3D;&#39;softmax&#39;))</span><br><span class="line">#变成概率分布输出</span><br><span class="line">model.compile(optimizer&#x3D;&#39;adam&#39;,loss&#x3D;&#39;sparse_categorical_crossentropy&#39;,metrics&#x3D;[&#39;acc&#39;])</span><br><span class="line">#标签为数字时用sparse_categorical_crossentropy</span><br><span class="line">model.fit(train_image, train_lable, epochss&#x3D;5)</span><br><span class="line">model.evaluate(test_image, test_label)</span><br><span class="line">#评价概率</span><br></pre></td></tr></table></figure><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="学习速率"><a href="#学习速率" class="headerlink" title="学习速率"></a>学习速率</h2><p>一种超参数（自己设置的参数）或对模型的一种手工可配置的设置</p><p>通过查看损失函数值随时间变化曲线判断学习速率的选取</p><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>高效的计算数据流图中梯度</p><p>每层的导数都是后一层的导数与前一层输出之积</p><p>先从输入开始5逐一计算每个隐含层 的输出，直到输出层；然后计算导数，从输出层经各隐含层逐一反向传播</p><h2 id="优化函数"><a href="#优化函数" class="headerlink" title="优化函数"></a>优化函数</h2><p>必须得两个参数之一</p><p>通过名称调用优化器</p><p>SGD：随机梯度下降优化器</p><p>RMSprop：对学习率进行衰减</p><p>Adam：对超参数的选择鲁棒；通过计算梯度的一阶矩估计和二阶矩估计而为不同的参数设计独立的自适应性学习率</p><h2 id="网络容量"><a href="#网络容量" class="headerlink" title="网络容量"></a>网络容量</h2><p>神经元越多，层数越多，拟合能力越强，可能产生过拟合</p><p>网络容量就是神经元的多少</p><h2 id="Dropout抑制过拟合与超参数选择"><a href="#Dropout抑制过拟合与超参数选择" class="headerlink" title="Dropout抑制过拟合与超参数选择"></a>Dropout抑制过拟合与超参数选择</h2><p>过拟合：随着epoch的增加，在训练数据上得分很高，在测试数据上却比价低</p><p>欠拟合：训练和测试数据上都得分比较低</p><p>dropout：随机丢弃一部分神经元，只激活部分层</p><h3 id="如何抑制过拟合"><a href="#如何抑制过拟合" class="headerlink" title="如何抑制过拟合"></a>如何抑制过拟合</h3><p>取平均：用相同的训练数据训练五个不同的神经网络，得到结果取平均值或多数投票</p><p>减少神经元之间复杂的共适应关系：权值更新不依赖于有固定关系的隐含节点的共同作用，阻止了某些特征仅仅在其他特定特征下才有的效果的情况</p><p>实际抑制过拟合的操作：增加训练数据；dropout；正则化；调节超参数</p><h3 id="添加dropout层"><a href="#添加dropout层" class="headerlink" title="添加dropout层"></a>添加dropout层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model.add(tf.keras.layers.Dropout(0.5))</span><br><span class="line">#只激活50%</span><br></pre></td></tr></table></figure><h1 id="函数式API"><a href="#函数式API" class="headerlink" title="函数式API"></a>函数式API</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">input &#x3D; keras.Input(shape&#x3D;(28,28))</span><br><span class="line">x &#x3D; keras.layers.Flatten()(input)</span><br><span class="line">#传入input调用Flatten层这个函数</span><br><span class="line">x &#x3D; keras.layers.Dense(32, activation&#x3D;&#39;relu&#39;)(x)</span><br><span class="line">#输出32个隐藏单元数</span><br><span class="line">x &#x3D; keras.layers.Dropout(0.5)(x)</span><br><span class="line">x &#x3D; keras.layers.Dense(64, activation&#x3D;&#39;relu&#39;)(x)</span><br><span class="line">output &#x3D; keras.layers.Dense(10, activation&#x3D;&#39;softmax&#39;)(x)</span><br><span class="line">model &#x3D; keras.Model(inputs&#x3D;input, outputs&#x3D;output)</span><br><span class="line">#构建模型</span><br><span class="line">model.compile(optimizer&#x3D;&#39;adam&#39;,</span><br><span class="line">loss&#x3D;&#39;sparse_categorical_crossentropy&#39;,</span><br><span class="line">metrics&#x3D;[&#39;accuracy&#39;])</span><br><span class="line">#编译模型</span><br></pre></td></tr></table></figure><p>判断两个图片相似度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x1 &#x3D; keras.layers.Flatten()(input1)</span><br><span class="line">x2 &#x3D; keras.layers.Flatten()(input2)</span><br><span class="line">x &#x3D; keras.layers.concatenate([x1,x2])</span><br><span class="line">x &#x3D; keras.layers.Dense(32, activation&#x3D;&#39;relu&#39;)(x)</span><br><span class="line">output &#x3D; keras.layers.Dense(1, activation&#x3D;&#39;sigmoid&#39;)(x)</span><br></pre></td></tr></table></figure><h1 id="Tensorflow2-0基础"><a href="#Tensorflow2-0基础" class="headerlink" title="Tensorflow2.0基础"></a>Tensorflow2.0基础</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node1 &#x3D; tf.constant([3.0,1.5], [2.5,6.0],tf.float32)</span><br><span class="line">#常量2*2的二维数组</span><br><span class="line">node2 &#x3D; tf.constant([4.0,1.0], [5.0,2.5],tf.float32)</span><br><span class="line">node3 &#x3D; tf.add(node1,node2)#加法</span><br><span class="line">shape#数据形状</span><br><span class="line">dtype#数据类型</span><br><span class="line">print(node3.numpy())#输出运算结果Tensor的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tens1 &#x3D; tf.constant([1,2,3])</span><br><span class="line">sess &#x3D; tf.Session()</span><br><span class="line">#创建会话得到运算结果</span><br><span class="line">sess.run(tens1)</span><br><span class="line">sess.close()</span><br><span class="line">#发生异常也可以关闭窗口</span><br><span class="line">with sess.as_default():</span><br><span class="line">print(result.eval())</span><br><span class="line">#print(result.eval(session&#x3D;sess)) 执行session</span><br></pre></td></tr></table></figure><h1 id="卷积CNN"><a href="#卷积CNN" class="headerlink" title="卷积CNN"></a>卷积CNN</h1><h2 id="相比于全连接网络"><a href="#相比于全连接网络" class="headerlink" title="相比于全连接网络"></a>相比于全连接网络</h2><p>对于600x600x3的图像，彩色RGB为3，会产生过拟合</p><p>训练速度过慢</p><h2 id="各层结构"><a href="#各层结构" class="headerlink" title="各层结构"></a>各层结构</h2><p>输入层：每个像素代表一个特征节点输入到网络</p><p>卷积层：使原信号特征增强，降低噪音 </p><p>降采样层：降低网络训练参数及模型的过拟合程度</p><p>（池化层）：降维</p><p>全连接层：对生成的特征进行加权</p><p>Softmax层：获得当前样例属于不同类别的概率</p><h2 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h2><p>卷积：在2维输入数据上“滑动”计算得到特征图</p><p>滑动：对于5x5的图像，选取3x3的9个点加权求和（利用卷积核），填入另一个25x9的表格中；在计算一个3x3的数据后向右移动一格，继续计算</p><p>步长：滑动的格数</p><p>卷积核：权值矩阵</p><p>局部连接：每个输入特征不用查看每个输入特征，只查看部分</p><p>权值共享：卷积核在图像上滑动过程中保持不变</p><p>填充：用像素为0的值填充边缘，使提取后图像仍然是5x5大小</p><p>池化：计算某特定特征的平均值（取背景信息）或最大值（纹理化）；在语义上把相似的特征合并起来</p><h2 id="卷积操作函数"><a href="#卷积操作函数" class="headerlink" title="卷积操作函数"></a>卷积操作函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">def ImgConvolve(image_array,kernel):</span><br></pre></td></tr></table></figure><pre><code>image_array：图像矩阵kernel：卷积核返回：原图像与算子进行卷积后的结果```image_arr = image_array.copy()img_dim1,img_dim2 = image_arr.shapek_dim1,k_dim2 = kernel.shapeAddW = int((k_dim1-1)/2)AddH = int((k_dim2-1)/2)temp = np.zeros([img_dim1+AddW*2,img_dim2+AddH*2])#padding填充temp[AddW:AddW+img_dim1,AddH:AddH+img_dim2] = image_arr[:,:]#拷贝原图到临时图片中央output = np.zeros_like(a=temp)for i in range(AddW,AddW+img_dim1):    for j in range(AddH,AddH+img_dim2):        output[i][j] = int(np.sum(temp[i-AddW:i+AddW+1,j-        AddW:j+AddW+1]*kernel))        #图线和权值点乘return output[AddW:AddW+img_dim1,AddH:AddH+img_dim2]</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简化API，用Keras和eager execution构造模型&lt;/p&gt;
&lt;h1 id=&quot;tf-keras概述&quot;&gt;&lt;a href=&quot;#tf-keras概述&quot; class=&quot;headerlink&quot; title=&quot;tf.keras概述&quot;&gt;&lt;/a&gt;tf.keras概述&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="Python" scheme="https://liting1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>anaconda</title>
    <link href="https://liting1024.github.io/2020/11/13/anaconda/"/>
    <id>https://liting1024.github.io/2020/11/13/anaconda/</id>
    <published>2020-11-13T08:44:54.000Z</published>
    <updated>2020-11-13T08:44:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux指令"><a href="#linux指令" class="headerlink" title="linux指令"></a>linux指令</h1><p>conda list 查看安装了哪些包。</p><p>conda env list 或 conda info -e 查看当前存在哪些虚拟环境</p><p>conda update conda 检查更新当前conda</p><p>conda deactivate 退出环境</p><p> conda create -n your_env_name python=X.X（2.7、3.6等)命令创建python版本为X.X、名字为your_env_name的虚拟环境</p><p> source activate your_env_name(虚拟环境名称) 激活环境</p><p> 使用命令conda remove -n your_env_name(虚拟环境名称) –all 删除环境</p><p>conda remove –name your_env_name package_name 删除环境中的包</p><h1 id="终端挂代理"><a href="#终端挂代理" class="headerlink" title="终端挂代理"></a>终端挂代理</h1><p>export http_proxy=socks5://127.0.0.1:1080 # 配置http 代理访问</p><p>export https_proxy=socks5://127.0.0.1:1080 # 配置https 代理访问</p><p> export all_proxy=socks5://127.0.0.1:1080 # 配置http和https访问</p><p> unset http_proxy # 取消http 代理访问</p><p>  unset https_proxy # 取消https 代理访问</p><p>export http_proxy=http: //127.0.0.1:1085;export https_proxy=http: //127.0.0.1:1085;</p><h1 id="screen挂起窗口"><a href="#screen挂起窗口" class="headerlink" title="screen挂起窗口"></a>screen挂起窗口</h1><p>进入screen后直接执行命令</p><p>此时想离开一段时间，但还想让这个命令继续执行：ctrl +a +d</p><ol><li><p>screen -S yourname -&gt; 新建一个叫yourname的session</p></li><li><p>screen -ls         -&gt; 列出当前所有的session</p></li><li><p>screen -r yourname -&gt; 回到yourname这个session</p></li><li><p>screen -d yourname -&gt; 远程detach某个session</p></li><li><p>screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</p></li><li><p>-A 　将所有的视窗都调整为目前终端机的大小。</p></li><li><p>-d   &lt;作业名称&gt; 　将指定的screen作业离线。</p></li><li><p>-h   &lt;行数&gt; 　指定视窗的缓冲区行数。</p></li><li><p>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</p></li><li><p>-r   &lt;作业名称&gt; 　恢复离线的screen作业。</p></li><li><p>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</p></li><li><p>-s 　指定建立新视窗时，所要执行的shell。</p></li><li><p>-S   &lt;作业名称&gt; 　指定screen作业的名称。</p></li><li><p>-v 　显示版本信息。</p></li><li><p>-x 　恢复之前离线的screen作业。</p></li><li><p>-ls或–list 　显示目前所有的screen作业。</p></li><li><p>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</p></li></ol><h1 id="显卡命令"><a href="#显卡命令" class="headerlink" title="显卡命令"></a>显卡命令</h1><p>nvidia-smi 查看显卡的信息</p><p>os.environ[“CUDA_VISIBLE_DEVICES”] = “1” 指定显卡1 import os</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux指令&quot;&gt;&lt;a href=&quot;#linux指令&quot; class=&quot;headerlink&quot; title=&quot;linux指令&quot;&gt;&lt;/a&gt;linux指令&lt;/h1&gt;&lt;p&gt;conda list 查看安装了哪些包。&lt;/p&gt;
&lt;p&gt;conda env list 或 conda</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://liting1024.github.io/2020/10/20/%E7%AE%97%E6%B3%95/"/>
    <id>https://liting1024.github.io/2020/10/20/%E7%AE%97%E6%B3%95/</id>
    <published>2020-10-20T07:24:20.000Z</published>
    <updated>2020-10-20T07:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>==version 1.1==</p><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>程序设计的实质：数据表示（存储在内存中，核心：数据结构）和数据处理（核心：算法）</p><p>数值问题 -&gt; 数学问题</p><p>非数值问题 -&gt; 数据结构</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="数据：信息的载体"><a href="#数据：信息的载体" class="headerlink" title="数据：信息的载体"></a>数据：信息的载体</h3><p>数据元素：数据的基本单位（讨论数据结构时涉及的最小数据单位）</p><p>数据项：构成数据元素的不可分割的最小单位</p><h3 id="数据结构：相互之间存在一定关系的数据元素的集合"><a href="#数据结构：相互之间存在一定关系的数据元素的集合" class="headerlink" title="数据结构：相互之间存在一定关系的数据元素的集合"></a>数据结构：相互之间存在一定关系的数据元素的集合</h3><h4 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h4><p>面向问题</p><p>是数据元素之间逻辑关系的整体</p><p>用来反映数据元素之间的关联方式或邻接关系</p><table><thead><tr><th>抽象的数据模型</th><th>逻辑关系</th></tr></thead><tbody><tr><td>线性表</td><td>一对一</td></tr><tr><td>树</td><td>一对多</td></tr><tr><td>图</td><td>多对多</td></tr><tr><td>集合</td><td>除了同属一个集合外没有任何关系</td></tr></tbody></table><h4 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h4><p>面向计算机</p><p>用来存储数据元素并显示或隐式地存储数据元素之间的逻辑关系</p><p>顺序存储：由元素的存储位置表示逻辑关系</p><p>链式存储：用指针表示逻辑关系</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>是对特定问题求解步骤的一种描述，是指令的有限序列</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>输入：可以没有</p><p>输出：必须有</p><p>有穷性：有穷步在有穷时间内完成</p><p>确定性：每条指令有确切含义</p><p>可行性：通过已经实现的基本操作执行有限次来实现</p><h3 id="好算法"><a href="#好算法" class="headerlink" title="好算法"></a>好算法</h3><p>正确性：合法输入得到正确结果</p><p>鲁棒性：对非法输入的抵抗能力</p><p>简单性：容易理解和实现</p><p>抽象分级：每个逻辑步骤能模块调用</p><p>高效性：时、空效率高</p><h3 id="描述方法"><a href="#描述方法" class="headerlink" title="描述方法"></a>描述方法</h3><table><thead><tr><th>语言</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>自然语言</td><td>容易理解</td><td>有二义性</td></tr><tr><td>流程图</td><td>直观易懂</td><td>严密性不如程序语言，灵活性不如自然语言</td></tr><tr><td>程序设计语言</td><td>能直接执行</td><td>抽象性差，拘于细节</td></tr><tr><td>伪代码</td><td>算法语言</td><td>真没缺点</td></tr></tbody></table><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p>事后统计</p><p>事前分析估算：渐进复杂度</p><h3 id="问题规模"><a href="#问题规模" class="headerlink" title="问题规模"></a>问题规模</h3><p>输入量的多少（n）</p><p>Eg：找到100以内的素数，问题规模为100</p><p>基本语句：执行次数与整个算法的执行次数成正比的语句</p><h3 id="渐进时间复杂度-O-n-P15"><a href="#渐进时间复杂度-O-n-P15" class="headerlink" title="渐进时间复杂度 O(n)    P15"></a>渐进时间复杂度 O(n)    P15</h3><p>平均情况：假设数据等概率分布</p><p>O(log[2] n)&lt;O(n)&lt;O(n*log[2] n)&lt;O(n^2)</p><p>Eg：</p><p>1、三层循环 O(n^3)</p><p>2、for(int i=1;i&lt;=n;i=2*i)</p><p>​            x++;</p><p>2^(T(n))&lt;=n </p><p>T(n)&lt;=log[2] n</p><p>3、for(int i=1;i&lt;=n;i++)</p><p>​            for(int j=1;j&lt;=i-1;j++)</p><p>​                x++;</p><p>求和（i-1）= n(n-1)/2</p><h1 id="线性表-L-a1-…-an"><a href="#线性表-L-a1-…-an" class="headerlink" title="线性表 L=(a1, …, an)"></a>线性表 L=(a1, …, an)</h1><p>长度：线性表的长度（有限序列）</p><p>空表 L=( )：长度为0</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>InitList</p><p>DestroyList</p><p>Length</p><p>Get 按位查找</p><p>Locate 按值查找</p><p>Insert</p><p>Delete</p><p>Empty</p><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><p>有限性：数据元素个数有穷</p><p>向同性：元素类型统一</p><p>顺序性：存在序偶关系，每个元素有且仅有一个前驱后继</p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>用地址连续的存储单元依次存储线性表的数据元素，通常用一维数组实现</p><p>静态存储分布</p><p>基地址：起始地址</p><p>数组长度 &gt;= 线性表长度</p><p>存取结构：<strong><em>随机存取</em></strong></p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>无需为表示元素间的逻辑关系新增空间</p><p>随机存取可以快速存取任意位置元素</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>插入删除需要移动大量元素</p><p>表容量难确定，难扩充</p><p>造成存储空间碎片</p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表只有一个指针域</p><p>存储特点：</p><p>逻辑次序和物理次序不一定相同</p><p>元素之间的逻辑关系用指针表示</p><p>存取结构：<strong><em>顺序存取</em></strong></p><h3 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h3><p>数据元素的存储映像</p><p>头结点：第一个元素结点之前附设的结点，以便空表和非空表处理统一</p><p>首结点：</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>存储的后继元素的地址信息</p><p>头指针：指向第一个元素所在的结点，起标识一个单链表的作用</p><p>尾标志：最后一个元素所在的终端结点的指针域为NULL</p><h3 id="其他链表"><a href="#其他链表" class="headerlink" title="其他链表"></a>其他链表</h3><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>附设头结点，空表和非空表处理一致</p><p>没有明显尾端（P != first）</p><p>开始结点：first-&gt;next</p><p>带尾指针时</p><p>开始结点：rear-&gt;next-&gt;next</p><p>终端结点：rear</p><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p>快速求直接前驱</p><p>空间换时间</p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>间接寻址：结合数组和指针，将数组中存储数据元素的单元改为存储指向该元素的指针</p><p>优点：插入删除时只需要修改指针不移动元素</p><p>缺点：没解决连续存储分配的问题，还需要维护一个空闲链，不能随机存取</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><h3 id="时间性能"><a href="#时间性能" class="headerlink" title="时间性能"></a>时间性能</h3><p>实现基于某存储结构的基本操作的时间复杂度</p><h3 id="空间性能"><a href="#空间性能" class="headerlink" title="空间性能"></a>空间性能</h3><p>存储密度 = 数据域占用的存储量 / 整个结点占用的</p><p>顺序表 = 1 存储空间利用率较高                                                                                                                                                                                                                                                                                                                               </p><p>链表 &lt; 1</p><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>操作受限的线性表，逻辑结构相同</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>限定仅在表尾插入删除的线性表，单一的前驱和后继</p><p>特性：后进先出</p><p>栈顶：允许插入和删除</p><p>栈空：不含任何数据元素的栈</p><h3 id="ADT"><a href="#ADT" class="headerlink" title="ADT"></a>ADT</h3><p>Push</p><p>Pop</p><p>GetTop</p><p>Empty</p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><p>栈空：top = -1</p><p>栈满：top = StackSize - 1</p><h3 id="两栈共享空间"><a href="#两栈共享空间" class="headerlink" title="两栈共享空间"></a>两栈共享空间</h3><p>栈空：top1 = - 1        top2 = Stack_Size</p><p>栈满：top2 = top1 + 1        top1 = top2 - 1</p><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><p>以单链表的头部做栈顶，不需要附设头结点</p><p>头插入栈</p><h3 id="顺序栈vs链栈"><a href="#顺序栈vs链栈" class="headerlink" title="顺序栈vs链栈"></a>顺序栈vs链栈</h3><p>基本操作的算法只需要常数时间</p><p>链栈有结构性开销，应采用顺序栈</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>只允许在一端插入另一端删除的线性表</p><p>特性：先进先出</p><p>队尾：允许出队（删除）</p><p>设置队头、队尾两个指针，改进出队时间性能 </p><p>队头指针：头元素前一个位置</p><p>队尾指针：队尾元素</p><h3 id="ADT-1"><a href="#ADT-1" class="headerlink" title="ADT"></a>ADT</h3><p>EnQueue</p><p>DeQueue</p><p>GetQueue</p><p>Empty</p><h3 id="顺序存储-循环队列"><a href="#顺序存储-循环队列" class="headerlink" title="顺序存储-循环队列"></a>顺序存储-循环队列</h3><p>假溢出：元素插入数组下标较大的位置移过去，数组的低端还有空闲空间</p><p>队空：front = rear = QueueSize - 1</p><p>队满：( rear + 1 ) % QueueSize = front</p><p>（头尾）进一：rear = ( rear + 1 ) % QueueSize</p><h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><p>使用头结点，使操作统一</p><h1 id="字符串和多维数组-S-“s1-s2-…-sn”"><a href="#字符串和多维数组-S-“s1-s2-…-sn”" class="headerlink" title="字符串和多维数组 S=“s1 s2 … sn”"></a>字符串和多维数组 S=“s1 s2 … sn”</h1><p>是数据元素为单个字符的线性表</p><p>串：零个或多个字符组成的有限序列<br>空格串：包含空格的串<br>子串：任意个连续的字符组成的子序列<br>主串：包含子串的串<br>子串在主串中的位置：子串的第一个字符在主串中的序号<br>字符串的比较：由ASCII码决定</p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>在主串S中寻找子串T的过程<br>模式：子串T</p><h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><p>主串每一个分别与子串每一个比较</p><p>最好情况下时间复杂度O(n+m)<br>改进的KMP算法：<br>i不回溯，j回溯到next[j]<br>失败时 T[0]<del>T[k-1]=S[i-k]</del>S[i-1]<br>成功时 T[j-k]<del>T[j-1]=S[i-k]</del>S[i-1]<br>综上 T[0]<del>T[k-1]=T[j-k]</del>T[j-1]</p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>类型相同的数据元素构成的有序集合<br>行[l1,h1]、列[l2,h2]：loc=基地址+c((i-l1)(h2-l2+1)+(j-l2))</p><h3 id="矩阵的压缩存储"><a href="#矩阵的压缩存储" class="headerlink" title="矩阵的压缩存储"></a>矩阵的压缩存储</h3><p>行优先：以行序为主序<br>特殊矩阵：很多值相同的元素且他们的分布有规律，<em>稀疏矩阵不属于特殊矩阵</em><br>压缩存储：值相同的元素只分配一个存储空间，零元素不分配存储空间</p><h4 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h4><p>关于主对角线对称，只存储下三角部分（和主对角线）<br>n*n -&gt; n(n+1)/2<br>存在数组SA[n(n+1)/2]中，下标k=i(i-1)/2+j-1（下标从0开始）</p><h4 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h4><p>对称矩阵，对角线上为常数c<br>n*n -&gt; n(n+1)/2+1<br>存在数组SA[n(n+1)/2+1]中，下标为k（从0开始）</p><h5 id="下三角"><a href="#下三角" class="headerlink" title="下三角"></a>下三角</h5><p>当 i &gt;= j 时 k = i(i-1)/2+j-1<br>当 i &lt; j 时 k = n(n+1)/2</p><h5 id="上三角"><a href="#上三角" class="headerlink" title="上三角"></a>上三角</h5><p>当 i &lt;= j 时 k = (i-1)(2n-i+2)/2+j-i<br>当 i &gt; j 时 k = n(n+1)/2</p><h4 id="对角矩阵"><a href="#对角矩阵" class="headerlink" title="对角矩阵"></a>对角矩阵</h4><p>k = 2 + 3(i-2) + (j-i+2)</p><h4 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h4><p>非零元素分布没有规律</p><p>三元组顺序表<br>row，col，item<br>在顺序表倒数三行需要存矩阵的行、列数、非零元的个数<br>十字链表<br>row，col，item，right，down<br>right 同行下一个三元组<br>down 同列下一个三元组</p><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><h2 id="树的术语"><a href="#树的术语" class="headerlink" title="树的术语"></a>树的术语</h2><p>树：n&gt;=0个结点的有限集合</p><p>空树：n=0</p><p>非空树：有且仅有一个根节点，其余结点分为m个互不相交的集合，每个集合都是这个根节点的一棵子树</p><p>结点：数据元素</p><p>度：子树的个数为结点的度，各节点的最大值为该树的度</p><p>叶子结点（终端结点）：度为0的结点</p><p>分支结点（非终端结点）：度不为0</p><p>路径长度：路径上进过的边数，在树中路径是唯一的</p><p>结点层数（树的深度、高度）：根结点的层数为1</p><p>同层编号：每层从左到右从1开始编号</p><p>有序树：从左到右有次序</p><p>森林：任何一个数删除根结点就变成森林了，<em>一棵树也可称为森林</em></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>前序：先根后括号</p><p>中序：左根右</p><p>后序：先左右后根</p><p>层序：从第一层，逐层遍历</p><h2 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h2><h3 id="双亲表示法"><a href="#双亲表示法" class="headerlink" title="双亲表示法"></a>双亲表示法</h3><p>静态链表（数组）</p><p>只存储双亲或带右兄弟的双亲</p><h3 id="孩子表示法"><a href="#孩子表示法" class="headerlink" title="孩子表示法"></a>孩子表示法</h3><h4 id="多重链表表示法"><a href="#多重链表表示法" class="headerlink" title="多重链表表示法"></a>多重链表表示法</h4><p>纯链表，双亲指向孩子</p><p>指针域的个数 = 度</p><p>缺点：各结点不同构时树的各种操作不容易实现，各结点同构时浪费存储空间</p><h4 id="孩子链表表示法"><a href="#孩子链表表示法" class="headerlink" title="孩子链表表示法"></a>孩子链表表示法</h4><p>数组存所有数据</p><p>数组中的firstchild用来存链表的表头，链表存结点的孩子</p><h4 id="双亲孩子表示法"><a href="#双亲孩子表示法" class="headerlink" title="双亲孩子表示法"></a>双亲孩子表示法</h4><p>孩子链表的基础上数组里加上双亲的下角标</p><h4 id="孩子兄弟表示法"><a href="#孩子兄弟表示法" class="headerlink" title="孩子兄弟表示法"></a>孩子兄弟表示法</h4><p>纯链表</p><p>左边存第一个孩子，右边存右兄弟</p><h2 id="二叉树的逻辑结构"><a href="#二叉树的逻辑结构" class="headerlink" title="二叉树的逻辑结构"></a>二叉树的逻辑结构</h2><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>n &gt;= 0</p><p>不存在度大于2的结点</p><p><strong><em>是有序的</em></strong>（本书）</p><p>斜树：所有结点都只有左子树或右子树，每层只有一个结点</p><p><em>满二叉树：叶子结点只出现在下一层，只有度为0和度为2的结点</em></p><p><em>完全二叉树：叶子结点只出现在下面俩层，如果有度为1的结点，只能有一个且该结点只有左孩子</em></p><p>满二叉树必是完全二叉树</p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>1、第i层上最多有$2^{i-1}$个</p><p>2、深度为k的二叉树最多有$2^k-1$个结点，最少有k个结点</p><p>3、叶子结点个数为$n_0$，度为2的结点个数为$n_2$，则$n_0=n_2+1$</p><p>4、具有n个结点的完全二叉树深度为$\lfloor log_2n \rfloor+1$</p><p>5、完全二叉树从1开始按层序编号</p><p>如果i&gt;1，结点i的双亲编号为$\lfloor i/2 \rfloor$</p><p>如果2i&lt;=n，结点i的左孩子编号为2i</p><p>如果2i+1&lt;=n，结点i的右孩子编号为2i+1</p><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p>把二叉树按完全二叉树编号，符合性质5</p><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="图的逻辑结构"><a href="#图的逻辑结构" class="headerlink" title="图的逻辑结构"></a>图的逻辑结构</h2><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><ol><li><p>图：由顶点的有穷<strong>非空</strong>集合和顶点之间边的集合组成（可以无边，必须有点）</p></li><li><p>无向边：俩顶点$v_i$和$v_j$之间的边没有方向<br>有向边（弧）：$v_i$为弧头，$v_j$为弧尾，用序偶对表示</p></li><li><p>无向图：任意边都是无向边，否则为有向图</p><p>无向完全图：任意两个顶点之间都有边</p><p>n个顶点则有n*(n-1)/2条边</p><p>有向完全图：任意两个顶点之间都有方向相反的两条弧</p><p>n个顶点则有n*(n-1)条边</p></li></ol><h3 id="图的术语"><a href="#图的术语" class="headerlink" title="图的术语"></a>图的术语</h3><ol><li><p>简单图：不存在顶点到自身的边，且同一边不重复出现</p></li><li><p>邻接：存在弧&lt;vi, vj&gt;，称顶点vi邻接vj，vj邻接自vi；弧&lt;vi, vj&gt;依附于顶点vi和vj；vj是vi的邻接点，vi不是vj的邻接点</p></li><li><p>稀疏图：边数很少的图，反之为稠密图</p></li><li><p>顶点的度：依附于该顶点的边的个数，入度+出度<br>入度：以该顶点为弧头的弧的个数<br>出度：以该顶点为弧尾的弧的个数</p></li><li><p>权：对边赋予的有意义的数值量<br>网：边上带权的图</p></li><li><p>路径：一个顶点序列（从一个顶点到另一个顶点）<br>路径长度：路径上边的数目（有权的话是权的和）<br>回路（环）：第一个顶点和最后一个顶点相同的路径<br>简单路径：顶点不重复出现的路径<br>简单回路： 除了第一个顶点和最后一个顶点外其余顶点不重复出现的回路（只绕一圈）</p></li><li><p>子图：一个图的点和边是另一个图的子集</p><p>一个图可以有很多子图<br>连通图（无向图）：任意两点之间有路径（不考虑自己到自己）<br>连通分量：非连通图的极大连通子图<br>强连通图：（有向图）两点之间均有路径<br>强连通分量：非强连通图的极大强连通子图</p></li><li><p>生成树：n个顶点的连通图G的生成树是包含G中全部顶点的一个极小连通子图</p><p>森林：每个连通分量得到的生成树构成的非连通图</p></li></ol><h3 id="ADT-2"><a href="#ADT-2" class="headerlink" title="ADT"></a>ADT</h3><p>InitGraph<br>DestroyGraph<br>DFSTraverse<br>BFSTraverse</p><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><p>深度优先（类似树的前序遍历）</p><p>广度优先（树的层序遍历）</p><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>矩阵vertex和顶点表arc<br>图：无边为0，有边为1<br>网：无边为∞，有边为权，主对角线为0</p><h3 id="邻接表（出边表）、逆邻接表（入边表）"><a href="#邻接表（出边表）、逆邻接表（入边表）" class="headerlink" title="邻接表（出边表）、逆邻接表（入边表）"></a>邻接表（出边表）、逆邻接表（入边表）</h3><p>顶点表（顺序）VertexNode：存所有顶点权值vertex和firstedge边表第一个结点<br>边表（链式）ArcNode：存顶点下标adjvext和next<br>存下标的原因：顶点可能结构复杂，修改结点的开销大<br>插入用头插，节省时间</p><h3 id="十字链表"><a href="#十字链表" class="headerlink" title="十字链表"></a>十字链表</h3><p>存储有向图<br>邻接表和逆邻接表的结合</p><h3 id="邻接多重表"><a href="#邻接多重表" class="headerlink" title="邻接多重表"></a>邻接多重表</h3><p>存储无向图表（顺序）<br>边表（链式）：</p><table><thead><tr><th>结点域</th><th>Statement</th></tr></thead><tbody><tr><td>ivex</td><td>某边依附顶点的下标i</td></tr><tr><td>ilink</td><td>依附于ivex的下一边</td></tr><tr><td>jvex</td><td>下标j</td></tr><tr><td>jlink</td><td>依附于jvex的下一边</td></tr></tbody></table><h3 id="邻接矩阵和邻接表的比较"><a href="#邻接矩阵和邻接表的比较" class="headerlink" title="邻接矩阵和邻接表的比较"></a>邻接矩阵和邻接表的比较</h3><table><thead><tr><th></th><th>空间</th><th>时间</th><th>适用范围</th><th>唯一性</th></tr></thead><tbody><tr><td>矩阵</td><td>O(n^2)</td><td>O(n^2)</td><td>稠密图</td><td>唯一</td></tr><tr><td>表</td><td>O(n+e)</td><td>O(n+e)</td><td>稀疏图</td><td>不唯一</td></tr></tbody></table><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><h3 id="MST性质"><a href="#MST性质" class="headerlink" title="MST性质"></a>MST性质</h3><p>一条具有最小权值的边，则必存在一课包含该边的最小生成树</p><h3 id="Prim（需代码）"><a href="#Prim（需代码）" class="headerlink" title="Prim（需代码）"></a>Prim（需代码）</h3><p>shortEdge</p><p>lowcost</p><p>adjvex</p><h1 id="查找技术"><a href="#查找技术" class="headerlink" title="查找技术"></a>查找技术</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><p>1、关键码：可以标识一个记录的某个数据项</p><p>关键值：关键码的值</p><p>主关键码：唯一标识一个记录，反之次关键码</p><p>2、查找：在具有相同类型的记录构成的集合中找到满足给定条件的记录</p><p>查找结果：返回查找到的记录的位置或值</p><p>静态查找：不涉及插入和删除操作</p><p>动态查找：查找不成功时插入数据</p><p>3、查找结构：为提高查找效率设计的数据结构</p><table><thead><tr><th>查找结构</th><th>适用</th><th>主要技术</th></tr></thead><tbody><tr><td>线性表</td><td>静态</td><td>顺序查找、折半查找</td></tr><tr><td>树表</td><td>动态</td><td>二叉排序树</td></tr><tr><td>散列表</td><td>都可</td><td>散列技术</td></tr></tbody></table><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>时间性能：关键码的比较次数</p><p>T(n,k)：问题规模n中查找位置k</p><p>平均查找长度：ASL=$\Sigma pc$ 查找概率乘以比较次数求和</p><h2 id="线性表查找"><a href="#线性表查找" class="headerlink" title="线性表查找"></a>线性表查找</h2><h3 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h3><p>待查值放在开头，设置为“哨兵”，从后向前查找，链式结构“哨兵”设置在头节点</p><p>表长大于1000时平均时间减半</p><h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3><p>可利用递归</p><p>计算mid，根据比较调整low和high</p><p>比较次数为mid计算次数</p><h4 id="折半查找判定树（判定树）"><a href="#折半查找判定树（判定树）" class="headerlink" title="折半查找判定树（判定树）"></a>折半查找判定树（判定树）</h4><p>结点记录查找过程结点在表中的位置</p><p>性质：</p><p>任意两折半查找判定树，若结点相同结构一定相同</p><p>任意两个叶子所在层数最多相差一</p><h3 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th>技术</th><th>要求</th><th>缺点</th><th>优点</th><th>ASL</th><th>时间性能</th></tr></thead><tbody><tr><td>顺序</td><td>无要求</td><td>n大时效率低</td><td>算法简单 适用面广</td><td>$\Sigma p(n-i+1)$</td><td>O(n)</td></tr><tr><td>折半</td><td>有序 顺序存储</td><td>要求高</td><td>效率高</td><td>$\Sigma(i*s^{i-1})$</td><td>O($log_2 n$)</td></tr></tbody></table><p>每个记录查找概率相同时p=1/n</p><h2 id="树表查找"><a href="#树表查找" class="headerlink" title="树表查找"></a>树表查找</h2><h3 id="二叉排序树（查找树）"><a href="#二叉排序树（查找树）" class="headerlink" title="二叉排序树（查找树）"></a>二叉排序树（查找树）</h3><p>构造-&gt;查找-&gt;插入，查找是插入的前序过程</p><p>空树 或 左孩子&lt;结点&lt;右孩子</p><p>二叉链表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;==version 1.1==&lt;/p&gt;
&lt;h1 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h1&gt;&lt;p&gt;程序设计的实质：数据表示（存储在内存中，核心：数据结构）和数据处理（核心：算法）&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="C++" scheme="https://liting1024.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>爬虫</title>
    <link href="https://liting1024.github.io/2020/07/08/%E7%88%AC%E8%99%AB/"/>
    <id>https://liting1024.github.io/2020/07/08/%E7%88%AC%E8%99%AB/</id>
    <published>2020-07-08T15:58:00.000Z</published>
    <updated>2020-07-08T15:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬取有道翻译（POST后下载）"><a href="#爬取有道翻译（POST后下载）" class="headerlink" title="爬取有道翻译（POST后下载）"></a>爬取有道翻译（POST后下载）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line"># 取消SSL证书检测</span><br><span class="line">import urllib.request</span><br><span class="line">import urllib.parse</span><br><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">while True:</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;fanyi.youdao.com&#x2F;translate?smartresult&#x3D;dict&amp;smartresult&#x3D;rule&#39;</span><br><span class="line">    data &#x3D; &#123;&#125;</span><br><span class="line">    data[&#39;i&#39;] &#x3D; input(&quot;请输入翻译内容：\n&quot;)</span><br><span class="line">    data[&#39;doctype&#39;] &#x3D; &#39;json&#39;</span><br><span class="line">    data[&#39;keyfrom&#39;] &#x3D; &#39;fanyi.web&#39;</span><br><span class="line">    data &#x3D; urllib.parse.urlencode(data).encode(&#39;utf-8&#39;)</span><br><span class="line"></span><br><span class="line">    response &#x3D; urllib.request.Request(url, data) #POST给网站要翻译的句子</span><br><span class="line">    response.add_header(&#39;User-Agent&#39;, &#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;81.0.4044.138 Safari&#x2F;537.36&#39;) # 伪装访问方式</span><br><span class="line">    response &#x3D; urllib.request.urlopen(response)</span><br><span class="line">    html &#x3D; response.read().decode(&#39;utf-8&#39;)</span><br><span class="line">    target &#x3D; json.loads(html)</span><br><span class="line">    print(target[&#39;translateResult&#39;][0][0][&#39;tgt&#39;])</span><br><span class="line">    time.sleep(2)</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup爬HTML"><a href="#BeautifulSoup爬HTML" class="headerlink" title="BeautifulSoup爬HTML"></a>BeautifulSoup爬HTML</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>find_all(self, name=None, attrs={‘ ‘:’ ‘}, recursive=True, text=None, limit=None, **kwargs)</p><p>查找所有</p><p>self要查找的元素</p><p>name目标元素的名称</p><p>attrs元素的属性</p><p>recursive查找是否在节点子树下展开</p><p>支持自己定义函数查找</p><p>find(self, name=None, attrs={‘ ‘:’ ‘}, recursive=True, text=None, limit=None, **kwargs)</p><p>查找第一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line">import urllib.request</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    url &#x3D; &#39;https:&#x2F;&#x2F;liting1024.github.io&#x2F;2020&#x2F;02&#x2F;20&#x2F;Python&#x2F;&#39;</span><br><span class="line">    response&#x3D;urllib.request.urlopen(url)</span><br><span class="line">    html&#x3D;response.read().decode()</span><br><span class="line">    soup&#x3D;BeautifulSoup(html,&#39;lxml&#39;)</span><br><span class="line"></span><br><span class="line">    def endsWith(s,t):</span><br><span class="line">        if len(s)&gt;&#x3D;len(t):</span><br><span class="line">            return s[len(s)-len(t):]&#x3D;&#x3D;t</span><br><span class="line">        return False</span><br><span class="line">    def myFilter(tag):</span><br><span class="line">        return (tag.name&#x3D;&#x3D;&#39;a&#39; and tag.has_attr(&#39;href&#39;) and tag[&#39;href&#39;]&#x3D;&#x3D;&#39;&#x2F;category&#39; and endsWith(tag.text,&#39;ies&#39;))</span><br><span class="line">    # 元素类型为a，有超链接，且超链接为&#x2F;category，内容以ies结尾</span><br><span class="line">    </span><br><span class="line">    tag1&#x3D;soup.find(&#39;h1&#39;)</span><br><span class="line">    tag2&#x3D;soup.find_all(&#39;a&#39;,attrs&#x3D;&#123;&#39;class&#39;:&#39;menu-item&#39;&#125;)</span><br><span class="line">    tag3&#x3D;soup.find_all(myFilter)</span><br><span class="line">    print(tag1,&#39;\n&#39;,tag2,&#39;\n&#39;,tag3)</span><br><span class="line">    for tag in tag2:</span><br><span class="line">        print(tag[&#39;href&#39;])</span><br><span class="line">    for tag in tag2:</span><br><span class="line">        print(tag.text)</span><br><span class="line">except Exception as err:</span><br><span class="line">    print(err)</span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>tag.parent 父类树节点</p><p>tag.children 子节点</p><p>tag.descendants 所有子孙节点</p><p>tag.next_sibling 最近的下一个兄弟节点</p><p>tag.previous_sibling 上一个兄弟节点</p><h3 id="CSS语法查找"><a href="#CSS语法查找" class="headerlink" title="CSS语法查找"></a>CSS语法查找</h3><p>soup.select(tagName, attName=value)</p><table><thead><tr><th align="left">attName</th><th>描述</th></tr></thead><tbody><tr><td align="left">attName^=value</td><td>以value开头匹配属性</td></tr><tr><td align="left">attName$=value</td><td>以value结尾</td></tr><tr><td align="left">attName*=value</td><td>包含指定值</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">soup.select(&quot;p a[rel&#x3D;&#39;noopener&#39;]&quot;))</span><br><span class="line"># 查找p下的具有rel&#x3D;‘noopenner’属性的a</span><br><span class="line">soup.select(&quot;p &gt; a&quot;)</span><br><span class="line"># 查找p下的子节点a，不包含孙节点</span><br><span class="line">soup.select(&quot;p ~ a&quot;)</span><br><span class="line"># 查到p后面同级别的a</span><br></pre></td></tr></table></figure><h3 id="爬天气预报"><a href="#爬天气预报" class="headerlink" title="爬天气预报"></a>爬天气预报</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line">import urllib.request</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from bs4 import UnicodeDammit</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;www.weather.com.cn&#x2F;weather&#x2F;101080101.shtml&#39;</span><br><span class="line">    headers&#x3D;&#123;&quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;81.0.4044.138 Safari&#x2F;537.36&quot;&#125;</span><br><span class="line">    req&#x3D;urllib.request.Request(url,headers&#x3D;headers)</span><br><span class="line">    data&#x3D;urllib.request.urlopen(req)</span><br><span class="line">    data&#x3D;data.read()</span><br><span class="line">    dammit&#x3D;UnicodeDammit(data,[&#39;utf-8&#39;,&#39;gdk&#39;])</span><br><span class="line">    html&#x3D;dammit.unicode_markup</span><br><span class="line">    # 自动选择解码</span><br><span class="line">    soup&#x3D;BeautifulSoup(html, &#39;lxml&#39;)</span><br><span class="line">    lis&#x3D;soup.select(&quot;ul[class&#x3D;&#39;t clearfix&#39;] li&quot;)</span><br><span class="line">    for li in lis:</span><br><span class="line">        date &#x3D; li.select(&#39;h1&#39;)[0].text</span><br><span class="line">        weather &#x3D; li.select(&quot;p[class&#x3D;&#39;wea&#39;]&quot;)[0].text</span><br><span class="line">        temp1 &#x3D; li.select(&quot;p[class&#x3D;&#39;tem&#39;] i&quot;)[0].text</span><br><span class="line">        if li.select(&quot;p[class&#x3D;&#39;tem&#39;] span&quot;)&#x3D;&#x3D;[]:</span><br><span class="line">            temp&#x3D;temp1</span><br><span class="line">            # temp2和temp1相等是无法搜索到temp2</span><br><span class="line">        else:</span><br><span class="line">            temp2&#x3D;li.select(&quot;p[class&#x3D;&#39;tem&#39;] span&quot;)[0].text</span><br><span class="line">            temp&#x3D;temp1+&#39;&#x2F;&#39;+temp2</span><br><span class="line">        print(date, weather, temp)</span><br><span class="line">except Exception as err:</span><br><span class="line">    print(err)</span><br></pre></td></tr></table></figure><h2 id="爬树"><a href="#爬树" class="headerlink" title="爬树"></a>爬树</h2><h3 id="深度和广度类"><a href="#深度和广度类" class="headerlink" title="深度和广度类"></a>深度和广度类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Stack: # 列表栈，深度</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.st&#x3D;[]</span><br><span class="line">    def pop(self):</span><br><span class="line">        return self.st.pop()</span><br><span class="line">    def push(self,obj):</span><br><span class="line">        return self.st.append(obj)</span><br><span class="line">    def isempty(self):</span><br><span class="line">        return len(self.st)&#x3D;&#x3D;0</span><br><span class="line"></span><br><span class="line">class Queue: # 队列，广度</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.st&#x3D;[]</span><br><span class="line">    def fetch(self):</span><br><span class="line">        return self.st.pop(0)</span><br><span class="line">    def enter(self,obj):</span><br><span class="line">        return self.st.append(obj)</span><br><span class="line">    def isempty(self):</span><br><span class="line">        return len(self.st)&#x3D;&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>t = Thread(target=,args=)</p><p>target：要执行的函数</p><p>args：一个元组或列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line">t.setDaemon(False)</span><br><span class="line"># 设定为后台线程</span><br><span class="line">t.start()</span><br><span class="line"># 启动线程</span><br><span class="line">t.join()</span><br><span class="line"># 阻塞当前线程，等t执行后继续执行</span><br><span class="line">lock&#x3D;threading._RLock()</span><br><span class="line"># 设定一个锁</span><br><span class="line">lock.acquire()</span><br><span class="line"># lock获取线程锁，如果另一个线程调用了acquire而没有release则阻塞当前线程等待别的线程释放锁</span><br><span class="line">lock.release()</span><br><span class="line"># 释放锁</span><br></pre></td></tr></table></figure><h3 id="多线程爬天气网图片"><a href="#多线程爬天气网图片" class="headerlink" title="多线程爬天气网图片"></a>多线程爬天气网图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import ssl</span><br><span class="line">ssl._create_default_https_context &#x3D; ssl._create_unverified_context</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">from bs4 import UnicodeDammit</span><br><span class="line">from urllib import parse</span><br><span class="line">import urllib.request</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def imageSpider(start_url):</span><br><span class="line">    global threads</span><br><span class="line">    global count</span><br><span class="line">    try:</span><br><span class="line">        urls&#x3D;[]</span><br><span class="line">        req&#x3D;urllib.request.Request(start_url,headers&#x3D;headers)</span><br><span class="line">        data&#x3D;urllib.request.urlopen(req)</span><br><span class="line">        data&#x3D;data.read()</span><br><span class="line">        dammit&#x3D;UnicodeDammit(data, [&quot;utf-8&quot;,&quot;gdk&quot;])</span><br><span class="line">        data&#x3D;dammit.unicode_markup</span><br><span class="line">        soup&#x3D;BeautifulSoup(data,&#39;lxml&#39;)</span><br><span class="line">        images&#x3D;soup.select(&#39;img&#39;)</span><br><span class="line">        for image in images:</span><br><span class="line">            src&#x3D;image[&#39;src&#39;]</span><br><span class="line">            url&#x3D;parse.urljoin(start_url, src)</span><br><span class="line">            if url not in urls:</span><br><span class="line">                print(url)</span><br><span class="line">                urls.append(url)</span><br><span class="line">                count&#x3D;count+1</span><br><span class="line">                T&#x3D;threading.Thread(target&#x3D;download,args&#x3D;(url,count))</span><br><span class="line">                # 多线程运行download函数</span><br><span class="line">                T.setDaemon(False)</span><br><span class="line">                T.start()</span><br><span class="line">                threads.append(T)</span><br><span class="line">    except Exception as err:</span><br><span class="line">        print(err)</span><br><span class="line"></span><br><span class="line">def download(url,count):</span><br><span class="line">    if url[len(url)-4]&#x3D;&#x3D;&#39;.&#39;:</span><br><span class="line">        ext&#x3D;url[len(url)-4:]</span><br><span class="line">    else:</span><br><span class="line">        ext&#x3D;&#39;&#39;</span><br><span class="line">    req&#x3D;urllib.request.Request(url, headers&#x3D;headers)</span><br><span class="line">    data&#x3D;urllib.request.urlopen(req,timeout&#x3D;100)</span><br><span class="line">    data&#x3D;data.read()</span><br><span class="line">    fobj&#x3D;open(&#39;image\\&#39;+str(count)+ext,&#39;wb&#39;)</span><br><span class="line">    fobj.write(data)</span><br><span class="line">    fobj.close()</span><br><span class="line">    print(&#39;downloaded&#39;+str(count)+ext)</span><br><span class="line"></span><br><span class="line">start_url&#x3D;&#39;http:&#x2F;&#x2F;www.weather.com.cn&#x2F;weather1d&#x2F;101080101.shtml&#39;</span><br><span class="line">headers&#x3D;&#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;81.0.4044.138 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line">count&#x3D;0</span><br><span class="line">threads&#x3D;[]</span><br><span class="line">imageSpider(start_url)</span><br><span class="line">for t in threads: #多线程等待后结束主程序</span><br><span class="line">    t.join()</span><br><span class="line">print(&#39;END&#39;)</span><br></pre></td></tr></table></figure><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a><a href="https://www.jianshu.com/p/a87dee628cc2" target="_blank" rel="noopener">Scrapy</a></h2><h3 id="创建简单爬虫"><a href="#创建简单爬虫" class="headerlink" title="创建简单爬虫"></a>创建简单爬虫</h3><p>在虚拟python环境中pip install scrapy</p><p>scrapy startproject XXX</p><p>生成爬虫名字为itcast，地址为itcast.cn </p><p>scrapy genspider itcast itcast.cn</p><p>启动爬虫不打印日志</p><p>scrapy crawl 爬虫名字 –nolog </p><p>在spider文件夹中建立py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line">class MySpider(scrapy.Spider):</span><br><span class="line">    name&#x3D;&quot;mySpider&quot;</span><br><span class="line"></span><br><span class="line">    def start_requests(self):</span><br><span class="line">    # 整个函数可以用start_urls &#x3D; [&#39;https:&#x2F;&#x2F;www.baidu.com&#39;]代替</span><br><span class="line">        url&#x3D;&#39;https:&#x2F;&#x2F;www.baidu.com&#39;</span><br><span class="line">        yield scrapy.Request(url&#x3D;url, callback&#x3D;self.parse)</span><br><span class="line">        # 访问网页回调callback函数，yield返回数据但可以不结束函数</span><br><span class="line">    def parse(self, response):</span><br><span class="line">        print(response.url)</span><br><span class="line">        data&#x3D;response.body.decode()</span><br><span class="line">        print(data)</span><br></pre></td></tr></table></figure><p>在XXX文件中建立py文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from scrapy import cmdline</span><br><span class="line"></span><br><span class="line">cmdline.execute(&#39;scrapy crawl mySpider -s LOG_ENABLED&#x3D;False&#39;.split())</span><br></pre></td></tr></table></figure><h3 id="查找HTML元素"><a href="#查找HTML元素" class="headerlink" title="查找HTML元素"></a>查找HTML元素</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from scrapy.selector import Selector</span><br><span class="line"></span><br><span class="line">selector&#x3D;Selector(text&#x3D;html)</span><br><span class="line">s&#x3D;selector.xpath(&#39;&#x2F;&#x2F;title&#39;)</span><br><span class="line"># &#x2F;&#x2F;表示在任何位置，&#x2F;表示下一级，&#39;&#x2F;&#x2F;body&#x2F;book&#39;搜索body下一级的book</span><br><span class="line"># selector.xpath(&#39;&#x2F;&#x2F;book&#39;).xpath(&#39;&#x2F;title&#39;)</span><br><span class="line"># .xpath(&#39;&#x2F;&#x2F;book&#39;).xpath(&#39;&#x2F;&#x2F;title&#39;) 对每个book查找title</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure><h4 id="解析为列表"><a href="#解析为列表" class="headerlink" title="解析为列表"></a>解析为列表</h4><p>s=selector.xpath(‘//title’).extract()</p><p>得到title组成的list，.extract_first()得到第一个元素</p><h4 id="获取属性、文本"><a href="#获取属性、文本" class="headerlink" title="获取属性、文本"></a>获取属性、文本</h4><p>s=selector.xpath(‘//title/@id’).extract()</p><p>获取属性值</p><p>s=selector.xpath(“”//title[@id=’chinese’]/text()”).extract()</p><p>限定id属性的值筛选</p><p>s=selector.xpath(‘//title/text()’).extract()</p><p>获取title的文本</p><h4 id="用-代表任何"><a href="#用-代表任何" class="headerlink" title="用*代表任何"></a>用*代表任何</h4><p>用*代替任何节点，不包括Text、Comment节点</p><p>s=selector.xpath(“”//title[@*]”)</p><p>任何属性</p><h4 id="position下角标"><a href="#position下角标" class="headerlink" title="position下角标"></a>position下角标</h4><p>从1开始编号</p><p>//body/title[position( )&gt;2] [position( )&lt;5]</p><p>取第三到六个title</p><h4 id="兄弟节点父节点"><a href="#兄弟节点父节点" class="headerlink" title="兄弟节点父节点"></a>兄弟节点父节点</h4><p>s= selector.xpath( //title[ @lang = ‘chinese ]/parent::*”)</p><p>查找属性为lang= chinese’的title的父节点</p><p>s=sclector.xpathC(“//b[position()= 1]following-sibling::* [position()=1]”)<br>搜索第一个b节点后面的第一个兄弟节点</p><p>“element/ollowing-sibling::*”搜索element后面的同级的所有兄弟节点</p><p>“element/preceding-sibling::*“搜索element 前面的同级的所有兄弟节点<br>“element/preceding-sibling::*[position()=1]”搜索element 前面的同级的第一个兄弟节<br>点</p><h3 id="其他py文件"><a href="#其他py文件" class="headerlink" title="其他py文件"></a>其他py文件</h3><h4 id="items-py储存数据"><a href="#items-py储存数据" class="headerlink" title="items.py储存数据"></a>items.py储存数据</h4><p>items中建立用于储存数据的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class YourprojectItem(scrapy.Item): # 继承scrapy.Item</span><br><span class="line">    # define the fields for your item here like:</span><br><span class="line">    # name &#x3D; scrapy.Field()</span><br><span class="line">    title&#x3D;scrapy.Field()</span><br></pre></td></tr></table></figure><p>在spiders中的爬虫中应用这个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from yourProject.items import YourprojectItem</span><br><span class="line"></span><br><span class="line">class MySpider(scrapy.Spider):</span><br><span class="line">    name&#x3D;&quot;mySpider&quot;</span><br><span class="line">    start_urls &#x3D; [&#39;https:&#x2F;&#x2F;www.baidu.com&#39;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        data&#x3D;response.body.decode()</span><br><span class="line">        selector&#x3D;scrapy.Selector(text&#x3D;data)</span><br><span class="line">        books&#x3D;selector.xpath(&quot;&#x2F;&#x2F;book&quot;)</span><br><span class="line">        for book in books:</span><br><span class="line">            item&#x3D;YourprojectItem()</span><br><span class="line">            item[&quot;title&quot;]&#x3D;book.xpath(&quot;.&#x2F;title&#x2F;text()&quot;).extract_first()</span><br><span class="line">            yield item</span><br></pre></td></tr></table></figure><h4 id="pipelines-py数据管道处理类"><a href="#pipelines-py数据管道处理类" class="headerlink" title="pipelines.py数据管道处理类"></a>pipelines.py数据管道处理类</h4><p>在settings.py中取消注释</p><p>ITEM_PIPELINES = {</p><p>​    ‘yourProject.pipelines.YourprojectPipeline’: 300,</p><p>}</p><p>爬取一次数据，调用一次process_item函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from itemadapter import ItemAdapter</span><br><span class="line"></span><br><span class="line">class YourprojectPipeline(object):</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    def process_item(self, item, spider):</span><br><span class="line">        YourprojectPipeline.count+&#x3D;1</span><br><span class="line">        if YourprojectPipeline.count&#x3D;&#x3D;1:</span><br><span class="line">            fobj&#x3D;open(&quot;book.txt&quot;,&quot;wb&quot;)</span><br><span class="line">        else:</span><br><span class="line">            fobj&#x3D;open(&quot;book.txt&quot;,&quot;at&quot;)</span><br><span class="line">        print(item[&quot;title&quot;])</span><br><span class="line">        fobj.write(item[&#39;title&#39;])</span><br><span class="line">        fobj.close()</span><br><span class="line">        return item</span><br></pre></td></tr></table></figure><h3 id="爬取当当网图书数据"><a href="#爬取当当网图书数据" class="headerlink" title="爬取当当网图书数据"></a>爬取当当网图书数据</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬取有道翻译（POST后下载）&quot;&gt;&lt;a href=&quot;#爬取有道翻译（POST后下载）&quot; class=&quot;headerlink&quot; title=&quot;爬取有道翻译（POST后下载）&quot;&gt;&lt;/a&gt;爬取有道翻译（POST后下载）&lt;/h2&gt;&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="Python" scheme="https://liting1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://liting1024.github.io/2020/07/08/Python%E5%9F%BA%E7%A1%80/"/>
    <id>https://liting1024.github.io/2020/07/08/Python%E5%9F%BA%E7%A1%80/</id>
    <published>2020-07-08T13:49:23.000Z</published>
    <updated>2020-07-08T13:49:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始编码之前首先确保Mac的python处于最新版本<br>在终端中输入alias python=python 3替换最新版本<br>输入python –version查看目前的python版本</p><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1019273143120480" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1016959663602400/1019273143120480</a></p><h1 id="Before-begin"><a href="#Before-begin" class="headerlink" title="Before begin"></a>Before begin</h1><h2 id="保留字符"><a href="#保留字符" class="headerlink" title="保留字符"></a>保留字符</h2><p><img src="/img/Python/%E4%BF%9D%E7%95%99%E5%AD%97%E7%AC%A6.png" alt="保留字符"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import keyword</span><br><span class="line">print(keyword.kwlist)</span><br><span class="line"># 查看关键字</span><br></pre></td></tr></table></figure><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>由英文数字下划线组成，且不以数字开头<br>单下划线开头表示不能直接访问的类属性<br>双下划线开头表示类的私有成员<br>双下划线开头和结尾是特殊方法专用标识   Eg：__ init __( )代表类的构造函数</p><p>允许汉字</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是一个注释</span></span><br><span class="line"></span><br><span class="line">‘‘’</span><br><span class="line">多行注释</span><br><span class="line">’‘’</span><br><span class="line"></span><br><span class="line">“”“</span><br><span class="line">多行注释</span><br><span class="line">”“”</span><br></pre></td></tr></table></figure><p>反斜杠（\）实现多行语句</p><h2 id="支持多个变量赋值"><a href="#支持多个变量赋值" class="headerlink" title="支持多个变量赋值"></a>支持多个变量赋值</h2><p>a = b = c = 1<br>a, b, c = 1, 2, “C” </p><p>给多个对象分别赋值多个变量</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = int(input(<span class="string">'请输入数据'</span>))</span><br><span class="line">b = input(<span class="string">"请输入数据"</span>)</span><br><span class="line">print(a,b)</span><br><span class="line"><span class="comment"># 同行输出，空格分割，换行再写一个print就会换行输出</span></span><br><span class="line">print(a,end = <span class="string">' '</span>)</span><br><span class="line"><span class="comment"># 显示在一行，且以空格分隔</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"舒克儿"</span>)</span><br><span class="line"><span class="comment"># 文件开头加入# coding=utf-8或者# -*- coding: UTF-8 -*-可支持中文</span></span><br><span class="line">print(<span class="string">"\u751f"</span>)</span><br><span class="line"><span class="comment"># 使用Unicode编码输出中文</span></span><br><span class="line"></span><br><span class="line">fp = open(<span class="string">r'/Users/liting/Downloads/gan.txt'</span>,<span class="string">'a+'</span>)</span><br><span class="line"><span class="comment"># mac使用终端路径，Windows使用Windows路径</span></span><br><span class="line">print(<span class="string">"淦起来"</span>,file = fp)</span><br><span class="line">fp.close()</span><br><span class="line"><span class="comment"># 把新建gan.txt，把淦起来输入到/Users/liting/Downloads/gan.txt中</span></span><br></pre></td></tr></table></figure><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">print(<span class="string">'当前年份：'</span>+str(datetime.datetime.now().year))</span><br><span class="line"><span class="comment"># 输出当前年份</span></span><br><span class="line">print(<span class="string">"当前日期实践："</span>+datetime.datetime.now().strftime(<span class="string">"%y-%m-%d %H:%M:%S"</span>))</span><br><span class="line"><span class="comment"># 输出"年-月-日 时:分:秒"</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">** </span><br><span class="line"># x的y次幂 Eg：10**2为100</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; </span><br><span class="line"># 返回商的整数部分 Eg：9&#x2F;&#x2F;2为4 </span><br><span class="line"></span><br><span class="line">is和is not </span><br><span class="line"># 判断俩个标识符是不是引用自一个对象，是则返回True</span><br><span class="line">in和not in </span><br><span class="line"># 判断是不是成员</span><br><span class="line"></span><br><span class="line">and、or和not</span><br><span class="line"># 逻辑与、逻辑或和逻辑非</span><br><span class="line"></span><br><span class="line">a &#x3D; a if a&gt;b else b</span><br><span class="line"># a和b中大的那一个</span><br></pre></td></tr></table></figure><h2 id="条件和循环语句"><a href="#条件和循环语句" class="headerlink" title="条件和循环语句"></a>条件和循环语句</h2><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p>if 判断条件1:<br>    执行语句1……<br>elif 判断条件2:<br>    执行语句2……<br>else:<br>    执行语句4……</p><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><p>while 判断语句：<br>    循环体<br>else:<br>    执行语句 # 循环条件为False时执行的语句</p><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><p>依次输出元组里的元素<br>for i in 元组:<br>    循环体<br>    print(‘ ‘, i)<br>else:<br>    执行语句    </p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h4 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h4><p>complex(real, imag)</p><h4 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h4><p>int 无long</p><h4 id="浮点"><a href="#浮点" class="headerlink" title="浮点"></a>浮点</h4><p>float 3E-2、1.23</p><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h4 id="从前往后，由0开始递增；从后往前，由-1开始递减"><a href="#从前往后，由0开始递增；从后往前，由-1开始递减" class="headerlink" title="从前往后，由0开始递增；从后往前，由-1开始递减"></a>从前往后，由0开始递增；从后往前，由-1开始递减</h4><h4 id="切片-sname-start-end-step"><a href="#切片-sname-start-end-step" class="headerlink" title="切片 sname[start : end : step]"></a>切片 sname[start : end : step]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">b&#x3D;a[::2]</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>sname：序列的名字</p><p>start：默认为0，开始位置</p><p>end：默认为序列长度，结束位置</p><p>step：默认为1，切片长度，隔step-1个</p><h2 id="各序列的特点"><a href="#各序列的特点" class="headerlink" title="各序列的特点"></a>各序列的特点</h2><h3 id="String（不可变）"><a href="#String（不可变）" class="headerlink" title="String（不可变）"></a>String（不可变）</h3><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(r&quot;\&quot;&quot;)</span><br><span class="line">print(&quot;\&quot;&quot;)</span><br><span class="line"># 用r或R强制转义</span><br></pre></td></tr></table></figure><h4 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h4><p>len(string)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string &#x3D; &#39;淦&#39;</span><br><span class="line">print(len(string.encode()))</span><br><span class="line"># 计算UTF-8编码的字符串长度</span><br><span class="line">print(len(string.encode(&#39;gdk&#39;)))</span><br><span class="line"># 计算GBK编码的字符串长度</span><br></pre></td></tr></table></figure><h4 id="分隔为表格"><a href="#分隔为表格" class="headerlink" title="分隔为表格"></a>分隔为表格</h4><p>str.split(sep, maxsplit)</p><p>sep为指定分隔符，默认为空格</p><p>maxsplit为分隔次数</p><h4 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str &#x3D; &quot;abc&quot;</span><br><span class="line">print(str.find(&#39;a&#39;))</span><br><span class="line"># 返回首次出现的下角标，不存在返回-1</span><br><span class="line">print(str.index(&#39;a&#39;))</span><br><span class="line"># 和find的相同，不存在时抛出异常</span><br><span class="line">print(str.rindex(&#39;a&#39;))</span><br><span class="line"># 和index相同，只是从右开始检索</span><br></pre></td></tr></table></figure><h4 id="确定开头结尾"><a href="#确定开头结尾" class="headerlink" title="确定开头结尾"></a>确定开头结尾</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.startswith(&#39;a&#39;)</span><br><span class="line"># 是否以a为开头</span><br><span class="line">str.endswith(&#39;bc&#39;)</span><br><span class="line"># 是否以bc为结尾</span><br></pre></td></tr></table></figure><h4 id="去除空格和特殊字符"><a href="#去除空格和特殊字符" class="headerlink" title="去除空格和特殊字符"></a>去除空格和特殊字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.strip(&#39;@#&#39;)</span><br><span class="line"># 去除str两侧的@或#</span><br><span class="line">str.lstrip(&#39;a&#39;)</span><br><span class="line"># 去除左侧的a</span><br></pre></td></tr></table></figure><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>{ [ index ] [ : [ [fill ] align ] [ sign ] [ # ] [ width ] [ .percision ] [ type ] ] }<br>index：设置的对象在参数列表中索引位置，省略则按照先后分配<br>fill：空白填充字符<br>align：&lt;内容做对齐；&gt;内容右对齐；^内容居中；=内容右对齐，放在填充字符左侧，只对数字有效；需要配合width<br>sign：<br>#：二、八、十六进制显示0b/0o/0x的前缀<br>width：占用宽度<br>type：如下表</p><table><thead><tr><th align="center">type</th><th align="center">说明</th><th align="center">type</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">s</td><td align="center">对字符串类型格式化</td><td align="center">b</td><td align="center">十进制转为二进制后格式化</td></tr><tr><td align="center">d</td><td align="center">十进制整数</td><td align="center">o</td><td align="center">十进制转为八进制后格式化</td></tr><tr><td align="center">c</td><td align="center">十进制自动转为相应的Unicode</td><td align="center">x/X</td><td align="center">十进制转为十六进制格式化</td></tr><tr><td align="center">e/E</td><td align="center">科学计数法表示</td><td align="center">f/F</td><td align="center">浮点小数（默认保留6位）</td></tr><tr><td align="center">g/G</td><td align="center">自动在e和f中切换</td><td align="center">%</td><td align="center">显示百分比（默认保留6位）</td></tr></tbody></table><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>1、基础表达式</p><table><thead><tr><th align="center">元字符</th><th align="left"></th></tr></thead><tbody><tr><td align="center">.</td><td align="left">匹配除换行符以外的字符</td></tr><tr><td align="center">\w</td><td align="left">匹配字母、数字、下划线或汉字</td></tr><tr><td align="center">\W</td><td align="left">匹配除字母、数字、下划线或汉字以外的</td></tr><tr><td align="center">\s</td><td align="left">匹配单个空白符</td></tr><tr><td align="center">\S</td><td align="left">匹配除单个空白符外的字符</td></tr><tr><td align="center">\d</td><td align="left">匹配数字</td></tr><tr><td align="center">\b</td><td align="left">匹配单词的开始或结束，单词的分界通常是空格、标点、换行</td></tr><tr><td align="center">^</td><td align="left">匹配字符串的开始</td></tr><tr><td align="center">$</td><td align="left">匹配字符串的结束</td></tr></tbody></table><table><thead><tr><th>限定符</th><th></th><th>举例</th></tr></thead><tbody><tr><td>?</td><td>匹配前面的字符0次或1次</td><td>colou?r 匹配colour和color</td></tr><tr><td>+</td><td>1次或多次</td><td>go+gle匹配gogle到goo…gle</td></tr><tr><td>*</td><td>0次或多次</td><td>go*gle匹配ggle到goo…gle</td></tr><tr><td>{n}</td><td>n次</td><td>go{2}gle匹配google</td></tr><tr><td>{n,}</td><td>最少n次</td><td>go{2,}gle匹配google到goo…gle</td></tr><tr><td>{n,m}</td><td>匹配前面的字符最少n次，最多m次</td><td>employe{0,2}匹配employee，employ，employe</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">^\d&#123;8&#125;$</span><br><span class="line"># 匹配8位QQ号</span><br><span class="line">\bmr\w*\b</span><br><span class="line"># 匹配mrsoft、mr1234等</span><br></pre></td></tr></table></figure><p>2、对于非数字和字母，在方括号里列出，| 和 \ 、( ) 的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[?!]表示匹配?或者!</span><br><span class="line"></span><br><span class="line">[\u4e00-\\u9fa5]匹配一个汉字，[\u4e00-\\u9fa5]+匹配多个汉字</span><br><span class="line"></span><br><span class="line">[a-z0-9A-Z]和\w相同（不考虑汉字）</span><br><span class="line"></span><br><span class="line">[^0-9]除数字以外的</span><br><span class="line"></span><br><span class="line">(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d|X|x)$匹配15、18位数字或17位数字最后一位是X或x </span><br><span class="line"></span><br><span class="line">(six|four)th匹配sixth或fourth，(\.[0-9]&#123;1,3&#125;)&#123;3&#125;表示对(\.[0-9]&#123;1,3&#125;)重复三次</span><br><span class="line"></span><br><span class="line">[1-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;表示匹配127.0.0.1之类的IP地址，\.表示对.的转义</span><br></pre></td></tr></table></figure><p>3、作为模式字符串使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r&#39;\bm\w*b&#39;</span><br><span class="line"># 开头为m需要转义</span><br></pre></td></tr></table></figure><p>4、使用re模块实现</p><p><strong>re.match(pattern, string, re.flags)</strong></p><p>仅从起始位置匹配模式字符串</p><p>pattern：模式字符串<br>string：要匹配的字符串<br>flags：标志</p><table><thead><tr><th>flags</th><th></th></tr></thead><tbody><tr><td>A或ASCII</td><td>对于\w、\W、lb、B、ld、D、\s和\S只进行ASCII匹配</td></tr><tr><td>I或IGNORECASE</td><td>执行不区分字母大小写的匹配</td></tr><tr><td>M或MULTILINE</td><td>将^和$用于包括整个字符串的开始和结尾的每一行（默认情况下，仅适用于整 个字符串的开始和结尾处）</td></tr><tr><td>S或DOTALL</td><td>使用（.） 字符匹配所有字符，包括换行符</td></tr><tr><td>X或VERBOSE</td><td>忽略模式字符串中未转义的空格和注释</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">pattern &#x3D; r&#39;mr_\w+&#39;</span><br><span class="line">string &#x3D; &#39;MR_SHOP mr_shop&#39;</span><br><span class="line">match &#x3D; re.match(pattern,string,re.I)</span><br><span class="line">print(match)</span><br><span class="line">print(&#39;起始位置&#39;,match.start())</span><br><span class="line">print(&#39;结束位置&#39;,match.end())</span><br><span class="line">print(&#39;匹配位置的元组&#39;,match.span())</span><br><span class="line">print(&#39;匹配的字符串&#39;,match.string)</span><br><span class="line">print(&#39;匹配数据&#39;,match.group())</span><br></pre></td></tr></table></figure><p><strong>re.search(pattern, string, re.flags)</strong></p><p>搜索出第一个符合模式的字符串</p><p><strong>re.findall(pattern, string, re.flags)</strong></p><p>以列表形式返回所有符合的字符串</p><p><strong>re.sub(pattern, repl, string, count, re.flags)</strong></p><p>找到模式字符串并替换为repl</p><p>repl：替换的字符串</p><p>count：匹配后替换的最多次数</p><p><strong>re.split(pattern, string, maxsplit,  re.flags)</strong></p><p>maxsplit：最大拆分次数 </p><p>按照pattern的分隔符分隔为列表</p><h3 id="Tuple（元组）（不可变）"><a href="#Tuple（元组）（不可变）" class="headerlink" title="Tuple（元组）（不可变）"></a>Tuple（元组）（不可变）</h3><h4 id="创建、删除"><a href="#创建、删除" class="headerlink" title="创建、删除"></a>创建、删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 基本与list相同</span><br><span class="line">b &#x3D; (&#39;gan&#39;,)</span><br><span class="line"># 只有一个元素的元组</span><br><span class="line">c &#x3D; (&#39;gan&#39;)</span><br><span class="line">print(c,type(c))</span><br><span class="line"># gan &lt;class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><h5 id="重新附值"><a href="#重新附值" class="headerlink" title="重新附值"></a>重新附值</h5><h5 id="尾部添加"><a href="#尾部添加" class="headerlink" title="尾部添加"></a>尾部添加</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; (1,&#39;b&#39;,3)</span><br><span class="line">a +&#x3D; (4,)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="List（列表）（可变）"><a href="#List（列表）（可变）" class="headerlink" title="List（列表）（可变）"></a>List（列表）（可变）</h3><h4 id="创建、删除-1"><a href="#创建、删除-1" class="headerlink" title="创建、删除"></a>创建、删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [1,&#39;b&#39;,3]</span><br><span class="line">emptylist &#x3D; []</span><br><span class="line">b &#x3D; list(range(0,10,2))</span><br><span class="line"># 创建一个从0到10，以2为步长的列表</span><br><span class="line">print(b)</span><br><span class="line"># [0, 2, 4, 6, 8]</span><br><span class="line">del a</span><br><span class="line"># 删除列表a</span><br></pre></td></tr></table></figure><h4 id="推导生成列表"><a href="#推导生成列表" class="headerlink" title="推导生成列表"></a>推导生成列表</h4><h5 id="newlist-experssion-for-var-in-rangelist"><a href="#newlist-experssion-for-var-in-rangelist" class="headerlink" title="newlist = [experssion for var in rangelist]"></a>newlist = [experssion for var in rangelist]</h5><p>expression用于计算新列表元素的表达式</p><p>var为列表中值的变量</p><p>rangelist采用range()函数生成的列表</p><h5 id="newlist-experssion-for-var-in-list-if-condition"><a href="#newlist-experssion-for-var-in-list-if-condition" class="headerlink" title="newlist = [experssion for var in list if condition]"></a>newlist = [experssion for var in list if condition]</h5><p>list为用于生成的列表</p><p>condition为判断条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">price &#x3D; [random.randint(100,1000) for x in range(5)]</span><br><span class="line"># 生成5个100～1000范围内的数</span><br><span class="line">print(price)</span><br><span class="line">price &#x3D; [x&#x2F;2 for x in price if x*0.5&gt;100]</span><br><span class="line"># 输出打五折后仍大于100的数</span><br><span class="line">print(price)</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>for item in listname: </p><p>for index,item in enumerate(listtname): </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]</span><br><span class="line">b&#x3D;&quot;is &quot;</span><br><span class="line">for i,item in enumerate(a):</span><br><span class="line">    print(i,b+item)</span><br><span class="line"># 0 is a</span><br><span class="line"># 1 is b</span><br><span class="line"># 2 is c</span><br></pre></td></tr></table></figure><h4 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">listname.append(obj)</span><br><span class="line"># 在listname列表尾添加obj</span><br><span class="line"></span><br><span class="line">listname.extend(seq)</span><br><span class="line"># 把seq的内容添加到listname后面</span><br><span class="line"></span><br><span class="line">del listname[index]</span><br><span class="line"># 删除listname中第index+1个值</span><br><span class="line"></span><br><span class="line">lisname.remove(obj)</span><br><span class="line"># 删除listname中的obj</span><br></pre></td></tr></table></figure><h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listname.count(obj)</span><br><span class="line"># 获取obj在list中出现的次数</span><br><span class="line"></span><br><span class="line">listname.index(obj)</span><br><span class="line"># 返回obj第一次出现的下角标</span><br><span class="line"></span><br><span class="line">sum(listname,x)</span><br><span class="line"># 返回listname的和+x</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>listname.sort(key=None, reverse=False)</p><p>newliest = sorted(lissome, key=None, reverse=False)</p><p>原list不变，newlist为排序后的list </p><p>关键字和排列顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;[10,20,40,60,3,5,16,34]</span><br><span class="line">a.sort()</span><br><span class="line">print(&#39;升序&#39;,a)</span><br><span class="line"># 升序 [3, 5, 10, 16, 20, 34, 40, 60]</span><br><span class="line">a.sort(reverse&#x3D;True)</span><br><span class="line">print(&#39;降序&#39;,a)</span><br><span class="line"># 降序 [60, 40, 34, 20, 16, 10, 5, 3]</span><br><span class="line"></span><br><span class="line">name &#x3D; [&#39;cat&#39;,&#39;Tom&#39;,&#39;Angela&#39;,&#39;pet&#39;]</span><br><span class="line">name.sort(key&#x3D;str.lower)</span><br><span class="line">print(name)</span><br><span class="line"># [&#39;Angela&#39;, &#39;cat&#39;, &#39;pet&#39;, &#39;Tom&#39;]</span><br><span class="line">name.sort()</span><br><span class="line">print(name)</span><br><span class="line"># [&#39;Angela&#39;, &#39;Tom&#39;, &#39;cat&#39;, &#39;pet&#39;]</span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）（可变）"><a href="#Dictionary（字典）（可变）" class="headerlink" title="Dictionary（字典）（可变）"></a>Dictionary（字典）（可变）</h3><p>相当于map，key和value绑定</p><h4 id="创建、删除-2"><a href="#创建、删除-2" class="headerlink" title="创建、删除"></a>创建、删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dictionary1 &#x3D; &#123;&#39;key1&#39;:&#39;value1&#39;,&#39;key2&#39;:&#39;value2&#39;&#125;</span><br><span class="line">nulldictionary &#x3D; &#123;&#125;</span><br><span class="line">dictionary2 &#x3D; dict(zip(list1,list2))</span><br><span class="line"># zip()：把列表或元组组合为元组，并返回包含这些呢绒的对象，可以用tuple()和list()把zip()转换</span><br><span class="line">dictionary3 &#x3D; dict(key1&#x3D;value1,key2&#x3D;value2)</span><br><span class="line">dictionary4 &#x3D; dict.fromkeys(list1)</span><br><span class="line"># 只包括名字的字典</span><br><span class="line">dictionary5 &#x3D; &#123;list:tuple&#125;</span><br><span class="line">del dictionary1</span><br><span class="line">dictionary2.clear()</span><br></pre></td></tr></table></figure><h4 id="推导生成字典"><a href="#推导生成字典" class="headerlink" title="推导生成字典"></a>推导生成字典</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">randomdict &#x3D; &#123;i:random.randint(10,100) for i in range(1,5)&#125;</span><br><span class="line">print(randomdict)</span><br><span class="line"># &#123;1: 28, 2: 46, 3: 35, 4: 94&#125;</span><br></pre></td></tr></table></figure><h4 id="修改元素-1"><a href="#修改元素-1" class="headerlink" title="修改元素"></a>修改元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dictionary[key] &#x3D; value</span><br><span class="line"># 添加或修改</span><br><span class="line">del dictionnary[key]</span><br></pre></td></tr></table></figure><h3 id="Set（集合）（可变）"><a href="#Set（集合）（可变）" class="headerlink" title="Set（集合）（可变）"></a>Set（集合）（可变）</h3><p>无序自动去重，每次输出的顺序可能都不同</p><h4 id="创建、删除-3"><a href="#创建、删除-3" class="headerlink" title="创建、删除"></a>创建、删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">setname &#x3D; &#123;1,2,&#39;d&#39;,&#39;c&#39;,1&#125;</span><br><span class="line"># &#123;1, 2, &#39;c&#39;, &#39;d&#39;&#125;</span><br><span class="line"></span><br><span class="line">setname &#x3D; set(&#39;我np&#39;)</span><br><span class="line"># &#123;&#39;n&#39;, &#39;我&#39;, &#39;p&#39;&#125;</span><br><span class="line">setname &#x3D; set((&quot;我&quot;, &quot;np&quot;))</span><br><span class="line"># &#123;&#39;我&#39;, &#39;np&#39;&#125;</span><br><span class="line">setname &#x3D; set((&quot;我np&quot;))</span><br><span class="line"># &#123;&#39;p&#39;, &#39;我&#39;, &#39;n&#39;&#125;</span><br><span class="line">setname &#x3D; set([1,2])</span><br><span class="line"># set里可以是列表、元组、range等</span><br></pre></td></tr></table></figure><h4 id="修改元素-2"><a href="#修改元素-2" class="headerlink" title="修改元素"></a>修改元素</h4><p>setname.add(value)</p><p>setname.pop()</p><p>移除第一个元素</p><p>setname.remove(value)</p><p>移除value</p><p>setname.clear(value)</p><p>清空所有元素</p><h4 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 &#x3D; &#123;&quot;python&quot;, &quot;java&quot;, &quot;cpp&quot;&#125;</span><br><span class="line">s2 &#x3D; set([&quot;python&quot;, &quot;c&quot;, &quot;html&quot;])</span><br><span class="line">print(s1&amp;s2, s1|s2, s1-s2)</span><br><span class="line"># &#123;&#39;python&#39;&#125; &#123;&#39;python&#39;, &#39;java&#39;, &#39;cpp&#39;, &#39;html&#39;, &#39;c&#39;&#125; &#123;&#39;java&#39;, &#39;cpp&#39;&#125;</span><br><span class="line"># s1和s2的交集，并集，是s1但不是s2的差集</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num &#x3D; [1, 2, 3]</span><br><span class="line">print(&#39;a&#39; in num)</span><br><span class="line"># False</span><br></pre></td></tr></table></figure><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; (1,&#39;b&#39;,3)</span><br><span class="line">print(a)</span><br><span class="line"># (1, &#39;b&#39;, 3)</span><br><span class="line">b &#x3D; a*2</span><br><span class="line">print(b)</span><br><span class="line"># (1, &#39;b&#39;, 3, 1, &#39;b&#39;, 3)</span><br></pre></td></tr></table></figure><h4 id="相加"><a href="#相加" class="headerlink" title="相加"></a>相加</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">num &#x3D; [1, 2, 3]</span><br><span class="line">print(a + num)</span><br><span class="line"># [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3]</span><br><span class="line"># 同为元组可以相加</span><br></pre></td></tr></table></figure><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><p>def functionname(parameterlist):</p><p>​    ‘’’comments’’’</p><p>​    pass或… 表示省略代码</p><p>​    functionbody</p><p>​    result = return [value]</p><p>comments：函数注释</p><p>parameterlist：传递参数，调用函数是实参，传值是形参</p><p>result：保存return的数据</p><p>value：返回的可以是字典或多个值</p><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p><strong>*parameterlist</strong></p><p>传递多个值</p><p>def functionname(*parametername):</p><p>接受任意多参数放在元组中</p><p>** <strong>parameterlist</strong></p><p>接受任意多参数放在字典中</p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>result = lambda parameterlist:expression</p><p>expression：实现函数功能的表达式</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><table><thead><tr><th align="center">常用函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">help( )</td><td align="center">查看函数或模块用途的详细说明</td></tr><tr><td align="center">id( )</td><td align="center">获取对象的地址</td></tr><tr><td align="center">dir( )</td><td align="center">不带参数，返回当前范围内变量、方法等；带参数是返回属性等</td></tr><tr><td align="center">divmod( )</td><td align="center">返回一个包含商和余数的元组</td></tr><tr><td align="center">next( )</td><td align="center">迭代器下一个项目</td></tr><tr><td align="center">open( )</td><td align="center">打开文件</td></tr><tr><td align="center">str( )</td><td align="center">把对象转换为适于阅读的形式</td></tr><tr><td align="center">filter( )</td><td align="center">返回符合条件的元素组成的新列表</td></tr><tr><td align="center">reversed( )</td><td align="center">反转迭代器</td></tr><tr><td align="center">round( )</td><td align="center">把浮点数四舍五入</td></tr><tr><td align="center">compile( )</td><td align="center">将字符串编译为字节代码</td></tr></tbody></table><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="模版-1"><a href="#模版-1" class="headerlink" title="模版"></a>模版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class classname(baseclass): # baseclass继承的基类</span><br><span class="line">&#39;&#39;&#39; &#39;&#39;&#39;</span><br><span class="line">def __init__(self): # 所有函数都至少需要传递本身self</span><br><span class="line">@property # 实现用于计算的属性，可以通过方法名访问，不用()</span><br><span class="line">def func(self, r):</span><br><span class="line">return r*r</span><br><span class="line">statement</span><br><span class="line">value &#x3D; classname( ) # 创造类的实例</span><br></pre></td></tr></table></figure><h3 id="保护对象"><a href="#保护对象" class="headerlink" title="保护对象"></a>保护对象</h3><p>类的函数名前加_表示访问限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__foo__ # 系统定义名字如__init__()</span><br><span class="line">_foo # 保护，只在类和子类中访问，不能通过 from module imprt * 导入</span><br><span class="line">__foo # 私有，可以通过 类名.属性名 或 实例.类_xxx访问</span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>在类外只读，不能修改</p><p>实现用于计算的属性，可以通过方法名访问，不用()</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在继承中直接重名写基类的函数</p><p>但init需要初始化，在派生类中加一个super( )._ _ init _ _( )</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><h4 id="import-modelname-as-othername"><a href="#import-modelname-as-othername" class="headerlink" title="import modelname as othername"></a>import modelname as othername</h4><p>设置othername为模块的别名</p><h4 id="from-modelname-import-member"><a href="#from-modelname-import-member" class="headerlink" title="from modelname import member"></a>from modelname import member</h4><p>导入modelname模块的member成员</p><p>member换为*表示全部成员</p><h4 id="import-包名-包下的模块"><a href="#import-包名-包下的模块" class="headerlink" title="import 包名.包下的模块"></a>import 包名.包下的模块</h4><p>创建文件夹为包，文件夹中存放_ _ init _ _.py，不用写任何内容</p><h3 id="添加目录"><a href="#添加目录" class="headerlink" title="添加目录"></a>添加目录</h3><p>modelname.path </p><p>#返回模块的目录</p><p>modelname.path.append(‘E:/program/python/Code/demo’) </p><p>#添加E:/program/python/Code/demo到模块</p><p>创建一个.pth文件，把目录路径写在里面</p><h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><table><thead><tr><th>模块名</th><th></th></tr></thead><tbody><tr><td>sys</td><td>与python解释器和环境操作有关</td></tr><tr><td>time</td><td>时间有关</td></tr><tr><td>os</td><td>访问操作系统服务功能</td></tr><tr><td>calendar</td><td>日期有关</td></tr><tr><td>urllib</td><td>读取网上的数据</td></tr><tr><td>json</td><td>使用json序列化和反序列化对象</td></tr><tr><td>re</td><td>在字符串的正则表达式</td></tr><tr><td>math</td><td>算数运算</td></tr><tr><td>decimal</td><td>精确控制运算精确度</td></tr><tr><td>shutil</td><td>高级文件操作：复制、移动、重命名</td></tr><tr><td>logging</td><td>记录事件警告错误等日志</td></tr><tr><td>tkinter</td><td>GUI编程的标准库</td></tr></tbody></table><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p><a href="https://pypi.org/" target="_blank" rel="noopener">官方模块</a></p><p>pip command modulename</p><p>command：install、uninstall、list（显示已安装）</p><h1 id="文件和IO"><a href="#文件和IO" class="headerlink" title="文件和IO"></a>文件和IO</h1><h2 id="创建打开、关闭文件"><a href="#创建打开、关闭文件" class="headerlink" title="创建打开、关闭文件"></a>创建打开、关闭文件</h2><h3 id="file-open-filename-mode-buffering-encoding-’utf-8’"><a href="#file-open-filename-mode-buffering-encoding-’utf-8’" class="headerlink" title="file = open(filename, mode, buffering, encoding=’utf-8’)"></a>file = open(filename, mode, buffering, encoding=’utf-8’)</h3><p>file：文件对象</p><p>filename：文件名，用’ ‘或” “括起来，如果打开的文件和当前文件同一目录下直接写文件名，否则需要写路径</p><p>mode：打开的模式，默认为r</p><p><img src="/img/Python/mode%E5%8F%82%E6%95%B0.png" alt="mode参数"></p><p>buffering：缓冲区大小，默认为缓冲</p><p>encoding：文件编码方式，默认为GBK</p><h3 id="file-close"><a href="#file-close" class="headerlink" title="file.close( )"></a>file.close( )</h3><p>刷新缓冲区中没有写入的信息再关闭文件</p><p>如果抛出异常则不能关闭文件</p><h3 id="with-expression-as-target"><a href="#with-expression-as-target" class="headerlink" title="with expression as target:"></a>with expression as target:</h3><p>expression：打开文件的函数</p><p>target：保存expression结果的变量</p><p>with-body：执行with后的语句，可以用pass代替</p><h3 id="file-write-string"><a href="#file-write-string" class="headerlink" title="file.write(string)"></a>file.write(string)</h3><p>写入字符</p><h3 id="file-read-size"><a href="#file-read-size" class="headerlink" title="file.read(size)"></a>file.read(size)</h3><p>读取size个字符，默认为全部字符，指针从文件开始读起</p><p>file.readline( ) 读取全部数据，但按行返回列表</p><h3 id="file-seek-offset-whence"><a href="#file-seek-offset-whence" class="headerlink" title="file.seek(offset, whence)"></a>file.seek(offset, whence)</h3><p>移动指针</p><p>offset：移动的字符个数</p><p>whence：0表示从开头开始移动；1表示从当前位置；2表示从文章尾移动，默认为0</p><h2 id="目录操作（import-os）"><a href="#目录操作（import-os）" class="headerlink" title="目录操作（import os）"></a>目录操作（import os）</h2><h3 id="os和os-path"><a href="#os和os-path" class="headerlink" title="os和os.path"></a>os和os.path</h3><p>os.name 返回nt表示WIndows，返回posix表示Linux或Mac os</p><p>os.linesep 返回换行符</p><p>os.sep 返回路径分隔符</p><p><img src="/img/Python/os.png" alt="os"></p><p><img src="/img/Python/os.path.png" alt="os.path"></p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">print(os.getcwd()) # 输出当前目录</span><br><span class="line">print(os.path.exists(&#39;&#x2F;Users&#x2F;liting&#x2F;PycharmProjects&#x2F;test&#39;))</span><br><span class="line"># 判断路径是否存在</span><br><span class="line">print(os.path.abspath(&#39;hello.py&#39;)) # 获取绝对路径</span><br><span class="line">print(os.path.join(&#39;&#x2F;Users&#x2F;liting&#x2F;PycharmProjects&#x2F;test&#39;, &#39;hello.py&#39;)) </span><br><span class="line"># 拼接路径</span><br></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>os.mkdir(path, mode=0o777)</p><p>创建一级目录</p><p>mode：在UNIX上省略</p><p>os.makedirs(path/path1/path2 mode=0o777)</p><p>创建多级目录</p><p>os.rmdir(path)</p><p>删除空目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import shutil</span><br><span class="line">Shut.rmtree(path)</span><br></pre></td></tr></table></figure><p>删除有文件的目录</p><h1 id="模块-1"><a href="#模块-1" class="headerlink" title="模块"></a>模块</h1><h2 id="虚拟运行环境"><a href="#虚拟运行环境" class="headerlink" title="虚拟运行环境"></a>虚拟运行环境</h2><p>pip3 install virtualenv</p><p>mkdir myproject</p><p>cd myproject</p><p>virtualenv venv # 创建名为venv的虚拟运行环境</p><p>source venv/bin/activate # 进入venv</p><p>deactivate # 退出venv</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开始编码之前首先确保Mac的python处于最新版本&lt;br&gt;在终端中输入alias python=python 3替换最新版本&lt;br&gt;输入python –version查看目前的python版本&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="Python" scheme="https://liting1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>树莓派</title>
    <link href="https://liting1024.github.io/2020/07/08/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <id>https://liting1024.github.io/2020/07/08/%E6%A0%91%E8%8E%93%E6%B4%BE/</id>
    <published>2020-07-08T13:46:24.000Z</published>
    <updated>2020-07-08T13:46:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/515d35847069" target="_blank" rel="noopener">笔记本电脑当作树莓派的显示器</a></p><p><a href="https://blog.csdn.net/wongnoubo/article/details/88833317" target="_blank" rel="noopener">修改静态地址</a></p><p><a href="https://linux.cn/article-10888-1.html" target="_blank" rel="noopener">SSH远程连接树莓派</a></p><h2 id="Linux基本命令"><a href="#Linux基本命令" class="headerlink" title="Linux基本命令"></a>Linux基本命令</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>cd XXX 进入XXX文件夹（不写XXX时退出到主页）</p><p>ls 查看目录下的文件夹</p><p>mkdir XXX 创建新文件夹</p><p>rm -rf XXX 删除有文件的文件夹</p><h3 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h3><p>clear 清空终端屏幕</p><p>Tab键 自动推断补全内容</p><h3 id="sudo-使用管理员身份（管理员创建的文件只能管理员修改）"><a href="#sudo-使用管理员身份（管理员创建的文件只能管理员修改）" class="headerlink" title="sudo 使用管理员身份（管理员创建的文件只能管理员修改）"></a>sudo 使用管理员身份（管理员创建的文件只能管理员修改）</h3><p>sudo apt-get update 更新软件</p><p>sudo apt-get install tree 下载tree（输入tree可以使文件树状化）</p><p>还需要下载cat、touch、vim</p><h3 id="vim-XXX编辑"><a href="#vim-XXX编辑" class="headerlink" title="vim XXX编辑"></a>vim XXX编辑</h3><p>i 编辑模式</p><p>ESC -&gt; :wq 保存</p><p>:q! 强制退出</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p>cat XXX查看</p><p>touch XXX 创建文件</p><p>python3 XXX.py 以python运行XXX.py</p><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>exit() 退出python</p><p>pip3 install gpiozero 下载gpio包</p><h2 id="利用Pycharm的ssh推送"><a href="#利用Pycharm的ssh推送" class="headerlink" title="利用Pycharm的ssh推送"></a>利用Pycharm的ssh推送</h2><p>iTerm2用ssh连接树莓派</p><p>在电脑本地和树莓派上同时创建同名文件夹</p><p>在Pycharm中打开文件夹，设置运行环境</p><p>在设置-网络中查看本机ip地址，输入Pycharm的SSH Configurations中</p><p>Host：本机地址</p><p>Username：pi</p><p>Password：树莓派的密码<br>Tools-Configuration 选择好path</p><p>Web path为默认的’/‘</p><p>Tools-Option-Create empty directories</p><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a><a href="https://gpiozero.readthedocs.io/en/stable/" target="_blank" rel="noopener">GPIO</a></h2><h3 id="RPi-GPIO"><a href="#RPi-GPIO" class="headerlink" title="RPi.GPIO"></a>RPi.GPIO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import RPi.GPIO as GPIO #导入RPi.GPIO库</span><br><span class="line"></span><br><span class="line">GPIO.setmode(GPIO.BCM) #设置输出为python的BCM</span><br><span class="line">GPIO.setwarnings(False) #取消报警</span><br><span class="line">GPIO.setup(2, GPIO.OUT, GPIO.PUD_UP) </span><br><span class="line">#设置2号BCM为输出口，初始状态为上拉 GPIO.PUD_DOWN&#x2F;GPIO.LOW</span><br><span class="line">GPIO.setup(2, GPIO.HIGH) #设置2号为上拉的高电平 </span><br><span class="line">GPIO.wait_for_press(3, GPIO.FALLING) #检测3号按钮状态 GPIO.RAISE</span><br></pre></td></tr></table></figure><h3 id="gpiozero"><a href="#gpiozero" class="headerlink" title="gpiozero"></a>gpiozero</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/515d35847069&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;笔记本电脑当作树莓派的显示器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="Python" scheme="https://liting1024.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>类与对象</title>
    <link href="https://liting1024.github.io/2020/05/28/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>https://liting1024.github.io/2020/05/28/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-05-27T16:31:18.000Z</published>
    <updated>2020-05-27T16:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>复制函数</p><p>用已有的类进行数据初始化</p><p>把类赋值给类</p><p>以传值方式初始化形参</p><p>深浅复制</p><p>当类成员中有指针时需要深复制，避免地址冲突</p><p>重载运算符 </p><p>成员函数有this指针，设置为public，在类外使用，可以重载[ ]和( )</p><p>友元函数无this指针，设置为privated也可以使用，可以重载&gt;&gt;和&lt;&lt;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;i, A &amp;a) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.<span class="built_in">size</span>; j++)</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a.p[j];</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;i, A &amp;a) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.<span class="built_in">size</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a.p[j] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A &amp;<span class="keyword">operator</span>=(A a) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] p;</span><br><span class="line">        p = <span class="keyword">new</span> <span class="keyword">int</span>[a.<span class="built_in">size</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>; i++)</span><br><span class="line">            p[i] = a.p[i];</span><br><span class="line">        <span class="built_in">size</span> = a.<span class="built_in">size</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//++Abject</span></span><br><span class="line">    <span class="comment">//friend A &amp; operator++(A &amp;)</span></span><br><span class="line">    A <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">            p[i]++;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Abject++</span></span><br><span class="line">    <span class="comment">//friend A &amp; operator++(A &amp;,int)</span></span><br><span class="line">    A <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        A x;</span><br><span class="line">        x.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">        x.p = <span class="keyword">new</span> <span class="keyword">int</span>[x.<span class="built_in">size</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">            x.p[i] = p[i];</span><br><span class="line">            p[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A <span class="keyword">operator</span>+(A a) &#123;</span><br><span class="line">        A x;</span><br><span class="line">        x.<span class="built_in">size</span> = <span class="built_in">size</span> &gt; a.<span class="built_in">size</span> ? <span class="built_in">size</span> : a.<span class="built_in">size</span>;</span><br><span class="line">        x.p = <span class="keyword">new</span> <span class="keyword">int</span>[x.<span class="built_in">size</span> + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">            x.p[i] = p[i] + a.p[i];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">return</span> p[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; i++)</span><br><span class="line">            sum += p[i];</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;复制函数&lt;/p&gt;
&lt;p&gt;用已有的类进行数据初始化&lt;/p&gt;
&lt;p&gt;把类赋值给类&lt;/p&gt;
&lt;p&gt;以传值方式初始化形参&lt;/p&gt;
&lt;p&gt;深浅复制&lt;/p&gt;
&lt;p&gt;当类成员中有指针时需要深复制，避免地址冲突&lt;/p&gt;
&lt;p&gt;重载运算符 &lt;/p&gt;
&lt;p&gt;成员函数有this指针，设置为pub</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="C++" scheme="https://liting1024.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++常用函数</title>
    <link href="https://liting1024.github.io/2020/04/15/C-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://liting1024.github.io/2020/04/15/C-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2020-04-15T15:12:59.000Z</published>
    <updated>2020-04-15T15:12:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cstring类型"><a href="#cstring类型" class="headerlink" title="cstring类型"></a>cstring类型</h1><h3 id="比较和计算"><a href="#比较和计算" class="headerlink" title="比较和计算"></a>比较和计算</h3><h4 id="strcmp-a-b"><a href="#strcmp-a-b" class="headerlink" title="strcmp(a,b);"></a>strcmp(a,b);</h4><p>比较返回两个char数组的差异度（-2表示有一个char不同）</p><h4 id="strlen-a"><a href="#strlen-a" class="headerlink" title="strlen(a);"></a>strlen(a);</h4><p>计算string或char数组的长度</p><h4 id="size"><a href="#size" class="headerlink" title="size();"></a>size();</h4><h4 id="lenth"><a href="#lenth" class="headerlink" title="lenth();"></a>lenth();</h4><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="memset-s-c-n"><a href="#memset-s-c-n" class="headerlink" title="memset(s, c, n);"></a>memset(s, c, n);</h4><p>将以开辟内存s的前n个直接初始化为c</p><p>n可以用sizeof(s)</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><h4 id="memcpy-b-a-n"><a href="#memcpy-b-a-n" class="headerlink" title="memcpy(b, a, n);"></a>memcpy(b, a, n);</h4><p>以a开头，长度为n的内存，拷贝到b中</p><h4 id="strncpy-b-a-n"><a href="#strncpy-b-a-n" class="headerlink" title="strncpy(b,a,n);"></a>strncpy(b,a,n);</h4><p>以a开头，长度为n的内存，拷贝到b中，<strong>并返回b</strong></p><h4 id="strcpy-b-a"><a href="#strcpy-b-a" class="headerlink" title="strcpy(b,a);"></a>strcpy(b,a);</h4><p>从a开始复制给b，遇到NULL ‘/0’结束</p><h4 id="strcat-b-a"><a href="#strcat-b-a" class="headerlink" title="strcat(b,a);"></a>strcat(b,a);</h4><p>把a连接到b后</p><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><h4 id="getline-cin-a-n"><a href="#getline-cin-a-n" class="headerlink" title="getline(cin,a,n);"></a>getline(cin,a,n);</h4><p>将流中的字符存在a中，</p><p>遇到n结束，没有默认为‘/n’</p><h2 id="cctype"><a href="#cctype" class="headerlink" title="cctype"></a>cctype</h2><h4 id="tolower-toupper"><a href="#tolower-toupper" class="headerlink" title="tolower(); toupper();"></a>tolower(); toupper();</h4><p>改变字母大小写</p><h4 id="isalpha-isdigit-isprint"><a href="#isalpha-isdigit-isprint" class="headerlink" title="isalpha(); isdigit(); isprint();"></a>isalpha(); isdigit(); isprint();</h4><p>判断是否是字母，数字，可打印字符（非控制字符）</p><h2 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h2><h4 id="min-max"><a href="#min-max" class="headerlink" title="min(); max()"></a>min(); max()</h4><p>返回两个元素中最小（最大）的一个</p><h4 id="upper-bound-first-last-n"><a href="#upper-bound-first-last-n" class="headerlink" title="upper_bound(first, last, n);"></a>upper_bound(first, last, n);</h4><p>查找区间中第一个大于n的位置，返回的是地址</p><h4 id="lower-bound-first-last-n"><a href="#lower-bound-first-last-n" class="headerlink" title="lower_bound(first, last, n);"></a>lower_bound(first, last, n);</h4><p>查找区间中第一个大于<strong>等于</strong>n的位置，返回的是地址</p><h4 id="next-permutation-first-last-prev-permutation"><a href="#next-permutation-first-last-prev-permutation" class="headerlink" title="next_permutation(first, last); prev_permutation();"></a>next_permutation(first, last); prev_permutation();</h4><p>将数组中的元素全排列</p><p><strong>需要将数组进行升序排列</strong>，否则只能找出该序列之后的全排列数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">char a[4]&#x3D;&#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;&#125;;</span><br><span class="line">    do&#123;</span><br><span class="line">        for(int i&#x3D;0;i&lt;4;++i)</span><br><span class="line">            cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;while(next_permutation(a,a+4));</span><br></pre></td></tr></table></figure><h4 id="sort-first-last-greater-lt-gt"><a href="#sort-first-last-greater-lt-gt" class="headerlink" title="sort(first, last, greater&lt;&gt;());"></a>sort(first, last, greater&lt;&gt;());</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a[5]&#x3D;&#123;5,2,4,3,1&#125;,b[3]&#x3D;&quot;cba&quot;;</span><br><span class="line">sort(a,a+5);&#x2F;&#x2F;正序排列</span><br><span class="line">sort(a,a+5,greater&lt;&gt;());&#x2F;&#x2F;逆序排列数字</span><br><span class="line">sort(b,b+3,greater&lt;char&gt;());&#x2F;&#x2F;逆序排列char</span><br></pre></td></tr></table></figure><h4 id="fill-first-last-a"><a href="#fill-first-last-a" class="headerlink" title="fill(first, last, a);"></a>fill(first, last, a);</h4><p>可将数组的值初始化成a</p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>一个动态申请空间的数组</p><h3 id="定义-vector-lt-typename-gt-name"><a href="#定义-vector-lt-typename-gt-name" class="headerlink" title="定义 vector &lt; typename &gt; name;"></a>定义 vector &lt; typename &gt; name;</h3><p>typename可以是任何基本类型 结构体,STL容器vector,set,queue等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; stu;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; stu;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; stu;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; stu;<span class="comment">//node是结构体类型</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; name;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span>&gt; a[arraySize];<span class="comment">//申请一个二维数组</span></span><br></pre></td></tr></table></figure><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化了10个默认值为0的元素</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">abc</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="comment">//初始化了10个值为1的元素</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cde</span><span class="params">(<span class="number">10</span>，<span class="number">1</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//通过数组a的地址初始化，注意地址是从0到5（左闭右开区间）</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a, a+<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//通过a初始化</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//insert初始化方式将同类型的迭代器对应的始末区间（左闭右开区间）内的值插入到vector中</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">6</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">vecot&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line"><span class="comment">//将a[0]~a[2]插入到b中，b.size()由0变为3</span></span><br><span class="line">b.insert(b.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>(), a.<span class="built_in">begin</span>() + <span class="number">3</span>);</span><br><span class="line"><span class="comment">//在b开始位置处插入6个6</span></span><br><span class="line">b.insert(b.<span class="built_in">begin</span>(), <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">5</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> a1[<span class="number">5</span>] = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*将a中元素全部拷贝到b开始的位置中,注意拷贝的区间为a.begin() ~ a.end()的左闭右开的区间*/</span></span><br><span class="line">copy(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b.<span class="built_in">begin</span>());</span><br><span class="line"> </span><br><span class="line"><span class="comment">//拷贝区间也可以是数组地址构成的区间</span></span><br><span class="line">copy(a1, a1+<span class="number">5</span>, b.<span class="built_in">begin</span>() + <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><h4 id="下标访问"><a href="#下标访问" class="headerlink" title="下标访问"></a>下标访问</h4><p>从0开始</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><p>vector<typename>::iterator it;//it是一个迭代器变量</p><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="push-back-a"><a href="#push-back-a" class="headerlink" title="push_back(a)"></a>push_back(a)</h4><p>在vector最后面添加一个元素a</p><h4 id="pop-back-x"><a href="#pop-back-x" class="headerlink" title="pop_back(x)"></a>pop_back(x)</h4><p>删除vector的尾元素x</p><h4 id="size-1"><a href="#size-1" class="headerlink" title="size()"></a>size()</h4><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>清空vector所有的元素</p><h4 id="insert"><a href="#insert" class="headerlink" title="insert();"></a>insert();</h4><p>insert(it,x);向vector的任意迭代器it初传入一个元素x</p><p>a.insert(a.begin()+1, 5);在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4<br>a.insert(a.begin()+1, 3,5);在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5<br>a.insert(a.begin()+1,b+3, b+6);b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如b为1,2,3,4,5,9,8，插入元素后为1,4,5,9,2,3,4,5,9,8</p><h4 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h4><p>erase(x); 删除单个元素</p><p>erase(a,b); 删除左闭右开区间内[a,b)的元素</p><h4 id="copy-a-begin-a-end-b-begin-1"><a href="#copy-a-begin-a-end-b-begin-1" class="headerlink" title="copy(a.begin(),a.end(),b.begin()+1);"></a>copy(a.begin(),a.end(),b.begin()+1);</h4><p>把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开始复制，覆盖掉原有元素</p><h4 id="find-a-begin-a-end-10"><a href="#find-a-begin-a-end-10" class="headerlink" title="find(a.begin(),a.end(),10);"></a>find(a.begin(),a.end(),10);</h4><p>在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</p><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>一个内部自动升序而且不重复元素的容器</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><table><thead><tr><th align="center"><strong>操作</strong></th><th align="center"><strong>效果</strong></th></tr></thead><tbody><tr><td align="center"><em>set</em> c</td><td align="center">产生一个空的set/multiset，不含任何元素</td></tr><tr><td align="center">set c(op)</td><td align="center">以op为排序准则，产生一个空的set/multiset</td></tr></tbody></table><h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><p>只能通过迭代器</p><p>set<typename>::iterator it;//typename对应定义set时的类型，auto自动推断定义类型</p><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="insert-x"><a href="#insert-x" class="headerlink" title="insert(x)"></a>insert(x)</h4><p>将x插入set容器中，并且自动递增排序和去重</p><h4 id="size-2"><a href="#size-2" class="headerlink" title="size()"></a>size()</h4><h4 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h4><h3 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h3><p>返回最后一个的迭代器</p><h4 id="find-x"><a href="#find-x" class="headerlink" title="find(x)"></a>find(x)</h4><p>查找值为x的元素，返回它的迭代器</p><h4 id="erase-1"><a href="#erase-1" class="headerlink" title="erase()"></a>erase()</h4><p>erase(x); 删除单个元素</p><p>erase(a,b); 删除左闭右开区间内[a,b)的元素</p><h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><p>有序可重复的容器</p><p>通过重载确定排序规则</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> rec&amp;a,<span class="keyword">const</span> rec&amp;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.x&lt;b.x||a.x==b.x&amp;&amp;a.y&lt;b.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">multiset</span>&lt;rec,cmp&gt;h;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>建立key（第一个值）和value（第二个值） 的对应，以key为标准有序</p><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>map&lt;int , int&gt; maps;</p><h3 id="访问-2"><a href="#访问-2" class="headerlink" title="访问"></a>访问</h3><p>maps[key] = value; //给key赋值，key有对应的value就覆盖</p><p>It-&gt;first = 1;</p><h3 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="insert-1"><a href="#insert-1" class="headerlink" title="insert()"></a>insert()</h4><p>maps.insert(pair&lt;type,type&gt;(1,1)); //maps[1] = 1;</p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>map&lt;type,type&gt;::iterator it = maps.find(x); //auto代替map&lt;type,type&gt;::iterator 自动推断值的类型</p><h4 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h4><p>maps.empty(); //空返回1</p><p>maps.size(); </p><p>maps.count(x); //返回指定元素出现的次数</p><h4 id="逆向迭代器"><a href="#逆向迭代器" class="headerlink" title="逆向迭代器"></a>逆向迭代器</h4><p>maps.rbegin(); //返回指向maps尾部的逆向迭代器  </p><p>maps.rend(); //返回指向maps头部的逆向迭代器</p><h4 id="bound"><a href="#bound" class="headerlink" title="bound"></a>bound</h4><p>maps.lower_bound(); //返回键值&gt;=给定元素的第一个迭代器</p><p>maps.upper_bound(); //返回键值&gt;给定元素的第一个迭代器</p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>for(map&lt;type,type&gt;::iterator it = maps.begin(); it != maps.end(); it++) </p><h4 id="erase-2"><a href="#erase-2" class="headerlink" title="erase()"></a>erase()</h4><p>maps.erase(iterator)</p><p>maps.erase(type)</p><h2 id="哈希hashtable"><a href="#哈希hashtable" class="headerlink" title="哈希hashtable"></a>哈希hashtable</h2><p>unordered_set 不存储重复元素</p><p>unordered_map 实现key和value的映射</p><h3 id="对比set和unordered-set"><a href="#对比set和unordered-set" class="headerlink" title="对比set和unordered_set"></a>对比set和unordered_set</h3><p>map和unordered_set也相同</p><table><thead><tr><th>对比</th><th>set</th><th>unordered_set</th></tr></thead><tbody><tr><td>有序</td><td>有序</td><td>无序</td></tr><tr><td>实现</td><td>BST或RBT</td><td>Hash Table</td></tr><tr><td>插入、删除</td><td>log n</td><td>平均O(1)，最坏O(n)</td></tr></tbody></table><h3 id="unordered-map的成员"><a href="#unordered-map的成员" class="headerlink" title="unordered_map的成员"></a>unordered_map的成员</h3><table><thead><tr><th>成员方法</th><th>功能</th></tr></thead><tbody><tr><td>begin()</td><td>返回指向容器中第一个键值对的正向迭代器。</td></tr><tr><td>end()</td><td>返回指向容器中最后一个键值对之后位置的正向迭代器。</td></tr><tr><td>cbegin()</td><td>和 begin() 功能相同，只不过在其基础上增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td>cend()</td><td>和 end() 功能相同，只不过在其基础上，增加了 const 属性，即该方法返回的迭代器不能用于修改容器内存储的键值对。</td></tr><tr><td>empty()</td><td>若容器为空，则返回 true；否则 false。</td></tr><tr><td>size()</td><td>返回当前容器中存有键值对的个数。</td></tr><tr><td>max_size()</td><td>返回容器所能容纳键值对的最大个数，不同的操作系统，其返回值亦不相同。</td></tr><tr><td>operator[key]</td><td>该模板类中重载了 [] 运算符，其功能是可以向访问数组中元素那样，只要给定某个键值对的键 key，就可以获取该键对应的值。注意，如果当前容器中没有以 key 为键的键值对，则其会使用该键向当前容器中插入一个新键值对。</td></tr><tr><td>at(key)</td><td>返回容器中存储的键 key 对应的值，如果 key 不存在，则会抛出 out_of_range 异常。</td></tr><tr><td>find(key)</td><td>查找以 key 为键的键值对，如果找到，则返回一个指向该键值对的正向迭代器；反之，则返回一个指向容器中最后一个键值对之后位置的迭代器（如果 end() 方法返回的迭代器）。</td></tr><tr><td>count(key)</td><td>在容器中查找以 key 键的键值对的个数。</td></tr><tr><td>equal_range(key)</td><td>返回一个 pair 对象，其包含 2 个迭代器，用于表明当前容器中键为 key 的键值对所在的范围。</td></tr><tr><td>emplace()</td><td>向容器中添加新键值对，效率比 insert() 方法高。</td></tr><tr><td>emplace_hint()</td><td>向容器中添加新键值对，效率比 insert() 方法高。</td></tr><tr><td>insert()</td><td>向容器中添加新键值对。</td></tr><tr><td>erase()</td><td>删除指定键值对。</td></tr><tr><td>clear()</td><td>清空容器，即删除容器中存储的所有键值对。</td></tr><tr><td>swap()</td><td>交换 2 个 unordered_map 容器存储的键值对，前提是必须保证这 2 个容器的类型完全相等。</td></tr><tr><td>bucket_count()</td><td>返回当前容器底层存储键值对时，使用桶（一个线性链表代表一个桶）的数量。</td></tr><tr><td>max_bucket_count()</td><td>返回当前系统中，unordered_map 容器底层最多可以使用多少桶。</td></tr><tr><td>bucket_size(n)</td><td>返回第 n 个桶中存储键值对的数量。</td></tr><tr><td>bucket(key)</td><td>返回以 key 为键的键值对所在桶的编号。</td></tr><tr><td>load_factor()</td><td>返回 unordered_map 容器中当前的负载因子。负载因子，指的是的当前容器中存储键值对的数量（size()）和使用桶数（bucket_count()）的比值，即 load_factor() = size() / bucket_count()。</td></tr><tr><td>max_load_factor()</td><td>返回或者设置当前 unordered_map 容器的负载因子。</td></tr><tr><td>rehash(n)</td><td>将当前容器底层使用桶的数量设置为 n。</td></tr><tr><td>reserve()</td><td>将存储桶的数量（也就是 bucket_count() 方法的返回值）设置为至少容纳count个元（不超过最大负载因子）所需的数量，并重新整理容器。</td></tr><tr><td>hash_function()</td><td>返回当前容器使用的哈希函数对象。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;cstring类型&quot;&gt;&lt;a href=&quot;#cstring类型&quot; class=&quot;headerlink&quot; title=&quot;cstring类型&quot;&gt;&lt;/a&gt;cstring类型&lt;/h1&gt;&lt;h3 id=&quot;比较和计算&quot;&gt;&lt;a href=&quot;#比较和计算&quot; class=&quot;header</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="C++" scheme="https://liting1024.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>用git与伙伴合力完成项目</title>
    <link href="https://liting1024.github.io/2020/03/04/%E7%94%A8git%E4%B8%8E%E4%BC%99%E4%BC%B4%E5%90%88%E5%8A%9B%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE/"/>
    <id>https://liting1024.github.io/2020/03/04/%E7%94%A8git%E4%B8%8E%E4%BC%99%E4%BC%B4%E5%90%88%E5%8A%9B%E5%AE%8C%E6%88%90%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-03-04T08:18:38.000Z</published>
    <updated>2020-03-04T08:18:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><h2 id="用homebrew安装"><a href="#用homebrew安装" class="headerlink" title="用homebrew安装"></a>用homebrew安装</h2><p><a href="https://brew.sh" target="_blank" rel="noopener">homebrew下载方式</a><br>brew install git</p><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>Xcode中自带了git，只需安装即可</p><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><p>打开Xcode-&gt;Preferences-&gt;Downloads-&gt;Command Line Tools-&gt;Install</p><h1 id="建立库"><a href="#建立库" class="headerlink" title="建立库"></a>建立库</h1><h2 id="建立本地库"><a href="#建立本地库" class="headerlink" title="建立本地库"></a>建立本地库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir 新建项目名字</span><br><span class="line"><span class="built_in">cd</span> 项目名字</span><br><span class="line">git init 把这个项目变成git可管理的项目</span><br><span class="line">//直接把项目写在这个位置就可以了</span><br><span class="line">//在对项目更改后</span><br><span class="line">git add 项目文件名1</span><br><span class="line">git add 项目文件名2</span><br><span class="line">git commit -m “这里输入本次提交的相关说明”</span><br></pre></td></tr></table></figure><h2 id="建立远程仓库"><a href="#建立远程仓库" class="headerlink" title="建立远程仓库"></a>建立远程仓库</h2><h4 id="把SSH关联到github或coding上，在github和coding的设置里有，SSH到本机Users-yourmac-ssh-id-rsa-pub，这个文件默认不可见，必须从终端中进入，可以下载atom并输入atom-id-rsa打开，复制SSH到网页"><a href="#把SSH关联到github或coding上，在github和coding的设置里有，SSH到本机Users-yourmac-ssh-id-rsa-pub，这个文件默认不可见，必须从终端中进入，可以下载atom并输入atom-id-rsa打开，复制SSH到网页" class="headerlink" title="把SSH关联到github或coding上，在github和coding的设置里有，SSH到本机Users/yourmac/.ssh/id_rsa.pub，这个文件默认不可见，必须从终端中进入，可以下载atom并输入atom id_rsa打开，复制SSH到网页"></a>把SSH关联到github或coding上，在github和coding的设置里有，SSH到本机Users/yourmac/.ssh/id_rsa.pub，这个文件默认不可见，必须从终端中进入，可以下载atom并输入atom id_rsa打开，复制SSH到网页</h4><h4 id="在github或coding上建立一个仓库"><a href="#在github或coding上建立一个仓库" class="headerlink" title="在github或coding上建立一个仓库"></a>在github或coding上建立一个仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 地址</span><br><span class="line">//origin是远程库的默认名字</span><br><span class="line">git push -u origin master </span><br><span class="line">//首次推送用这个命令进行关联，master是分支的默认名字</span><br><span class="line">git <span class="built_in">clone</span> github或者coding地址 //抓取分支</span><br><span class="line">git remote //查看远程库的信息</span><br><span class="line">git remote -v //更详细的信息</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 地址 //从远程库克隆</span><br><span class="line">git pull //从远程库抓取</span><br><span class="line">git add 文件名1 //添加推送文件</span><br><span class="line">git add 文件名2</span><br><span class="line">git commit -m <span class="string">"add"</span></span><br><span class="line">git push //进行最新推送</span><br></pre></td></tr></table></figure><blockquote><p>更详细的<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">教程戳这里</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装git&quot;&gt;&lt;a href=&quot;#安装git&quot; class=&quot;headerlink&quot; title=&quot;安装git&quot;&gt;&lt;/a&gt;安装git&lt;/h1&gt;&lt;h2 id=&quot;用homebrew安装&quot;&gt;&lt;a href=&quot;#用homebrew安装&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="SwiftUI" scheme="https://liting1024.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>最短路径</title>
    <link href="https://liting1024.github.io/2020/02/16/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    <id>https://liting1024.github.io/2020/02/16/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</id>
    <published>2020-02-16T05:27:02.000Z</published>
    <updated>2020-02-16T05:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h1><h3 id="PTA-L2-001-紧急救援"><a href="#PTA-L2-001-紧急救援" class="headerlink" title="PTA L2-001 紧急救援"></a>PTA L2-001 紧急救援</h3><p>作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。</p><h5 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h5><p>输入第一行给出4个正整数N、M、S、D，其中N（2&lt;=N&lt;=500）是城市的个数，顺便假设城市的编号为0~(N-1)；M是快速道路的条数；S是出发地的城市编号；D是目的地的城市编号。第二行给出N个正整数，其中第i个数是第i个城市的救援队的数目，数字间以空格分隔。随后的M行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。</p><h5 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h5><p>第一行输出不同的最短路径的条数和能够召集的最多的救援队数量。第二行输出从S到D的路径中经过的城市编号。数字间以空格分隔，输出首尾不能有多余空格。</p><h5 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h5><p>4 5 0 3<br>20 30 40 10<br>0 1 1<br>1 3 2<br>0 3 3<br>0 2 2<br>2 3 2</p><h5 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h5><p>2 60<br>0 1 3</p><p>用二维数组map[N][N]储存城市之间的长度，N是城市的代号，数组里的数字是横坐标表示的城市到纵坐标表示的城市的长度，X为0X7FFFFFFF（INT_MAX可以代替）</p><table><thead><tr><th>N</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>X</td><td>X</td><td>X</td></tr><tr><td>1</td><td>1</td><td>0</td><td>X</td><td>X</td></tr><tr><td>2</td><td>2</td><td>X</td><td>0</td><td>X</td></tr><tr><td>3</td><td>3</td><td>2</td><td>2</td><td>0</td></tr></tbody></table><p>用一位数组dis[N]储存出发地到所有地方的长度</p><table><thead><tr><th>N</th><th>0</th><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>dis</td><td>0</td><td>1</td><td>2</td><td>3</td></tr></tbody></table><p>先通过数组dis找到离出发地最近的城市为1号，同时由于没有其他方案能使得0到1之间的距离缩短，所以dis[1]为1，由于0也能出边到2和3，因此dis[2]=2，dis[3]=3，这样dis的初始化将就设置好了。</p><p>然后考虑1号可以出边到3号，所以比较发现dis[1]+map[1][3]==map[0][3]==3，so dis[3]为3。</p><p>然后考虑2号可以出边到3号，比较得出最终结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Dijkstra算法&quot;&gt;&lt;a href=&quot;#Dijkstra算法&quot; class=&quot;headerlink&quot; title=&quot;Dijkstra算法&quot;&gt;&lt;/a&gt;Dijkstra算法&lt;/h1&gt;&lt;h3 id=&quot;PTA-L2-001-紧急救援&quot;&gt;&lt;a href=&quot;#PTA-L2</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="C++" scheme="https://liting1024.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Swift语法</title>
    <link href="https://liting1024.github.io/2020/02/14/Swift%E8%AF%AD%E6%B3%95/"/>
    <id>https://liting1024.github.io/2020/02/14/Swift%E8%AF%AD%E6%B3%95/</id>
    <published>2020-02-14T07:35:00.000Z</published>
    <updated>2020-02-14T07:35:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func 函数名(外部参数名1 内部参数名1：参数类型，外部参数名2 内部参数名2:参数类型) -&gt; 返回值类型 &#123;</span><br><span class="line">    函数体</span><br><span class="line">    <span class="built_in">return</span> 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数名 (  ，)<br>外部参数名为 _ 时是省略的意思</p><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var 元组名 = (参数1，参数2)</span><br><span class="line"><span class="built_in">let</span> z = 元组名(_，b)</span><br></pre></td></tr></table></figure><p>只把参数2赋给z</p><h3 id="范围and循环"><a href="#范围and循环" class="headerlink" title="范围and循环"></a>范围and循环</h3><p>let a = 1…5   //封闭范围<br>let b = 1..&lt;5   //半开范围<br>let c = 1…   //到最大值</p><h4 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1...10 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"第\(i)次循环"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 循环条件&#123;</span><br><span class="line">   循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选类型"><a href="#可选类型" class="headerlink" title="可选类型"></a>可选类型</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="SwiftUI" scheme="https://liting1024.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>求最大公约数的多种算法及比较</title>
    <link href="https://liting1024.github.io/2020/02/02/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%9A%84%E5%A4%9A%E7%A7%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E6%AF%94%E8%BE%83/"/>
    <id>https://liting1024.github.io/2020/02/02/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E7%9A%84%E5%A4%9A%E7%A7%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E6%AF%94%E8%BE%83/</id>
    <published>2020-02-02T05:10:15.000Z</published>
    <updated>2020-02-02T05:10:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公约数的性质"><a href="#公约数的性质" class="headerlink" title="公约数的性质"></a>公约数的性质</h2><p>gcd(-a,b)=gcd(a,b)<br>gcd(a,0)=|a|<br>gcd(a,1)=1<br>gcd(a,b)=gcd(b, a-b)<br>gcd(ma,mb)=m * gcd(a,b)</p><p>⚠️注：两数必须为正整数</p><h2 id="辗转相除法（欧几里得）"><a href="#辗转相除法（欧几里得）" class="headerlink" title="辗转相除法（欧几里得）"></a>辗转相除法（欧几里得）</h2><p>时间效率： ⭐️<br>素数较大时运算耗时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) swap(a, b);//保证a大于b</span><br><span class="line">    int t = a % b;</span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">        t = a % b;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h2><p>时间效率： ⭐️⭐️⭐️</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    int t = a &gt; b ? b : a;//t为min</span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % t == 0 &amp;&amp; b % t == 0)</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        t--;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更相减损术"><a href="#更相减损术" class="headerlink" title="更相减损术"></a>更相减损术</h2><p>时间效率： ⭐️⭐️⭐️<br>两数相差大时运算次数多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cmath&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    int l = 0;</span><br><span class="line">    <span class="keyword">while</span> (a % 2 == 0 &amp;&amp; b % 2 == 0) &#123;//都是偶数则除二</span><br><span class="line">        a /= 2;</span><br><span class="line">        b /= 2;</span><br><span class="line">        l++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) swap(a, b);//保证a大于b</span><br><span class="line">    int t = 1;</span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        t = a - b;</span><br><span class="line">        a = b &gt; t ? b : t;//保证a大于b</span><br><span class="line">        b = b &gt; t ? t : b;</span><br><span class="line">        <span class="keyword">if</span> (a == b)//直到两数相等</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; pow(2, l) * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Stein算法"><a href="#Stein算法" class="headerlink" title="Stein算法"></a><a href="https://blog.csdn.net/Zhao_Xinhao/article/details/76060119" target="_blank" rel="noopener">Stein算法</a></h2><p>时间效率： ⭐️⭐️<br>对于辗转相除法的改进</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">//递归</span><br><span class="line">int Stein(int u, int v) &#123;</span><br><span class="line">    <span class="keyword">if</span> (u == 0) &#123;</span><br><span class="line">        <span class="built_in">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v == 0) &#123;</span><br><span class="line">        <span class="built_in">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~u &amp; 1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &amp; 1) &#123;</span><br><span class="line">            <span class="built_in">return</span> Stein(u &gt;&gt; 1, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">return</span> Stein(u &gt;&gt; 1, v &gt;&gt; 1) &lt;&lt; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~v &amp; 1) &#123;</span><br><span class="line">        <span class="built_in">return</span> gcd2(u, v &gt;&gt; 1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (u &gt; v) &#123;</span><br><span class="line">        <span class="built_in">return</span> gcd2((u - v) &gt;&gt; 1, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> gcd2((v - u) &gt;&gt; 1, u);</span><br><span class="line">&#125;</span><br><span class="line">//非递归</span><br><span class="line">int Stein(unsigned int x, unsigned int y) &#123;</span><br><span class="line">    int factor = 0;   //计数器</span><br><span class="line">    int temp;</span><br><span class="line"></span><br><span class="line">    //大数赋给x，小数赋给y</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">        temp = x;</span><br><span class="line">        x = y;</span><br><span class="line">        y = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (0 == y) &#123;</span><br><span class="line">        <span class="built_in">return</span> 0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x != y) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &amp; 0x1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y &amp; 0x1) &#123;   //x,y都为奇数</span><br><span class="line">                y = (x - y) &gt;&gt; 1;</span><br><span class="line">                x -= y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;    // x为奇数，y为偶数</span><br><span class="line">                y &gt;&gt;= 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (y &amp; 0x1) &#123;   // x为偶数，y为奇数</span><br><span class="line">                x &gt;&gt;= 1;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">                    temp = x;</span><br><span class="line">                    x = y;</span><br><span class="line">                    y = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;   //x,y均为偶数</span><br><span class="line">                x &gt;&gt;= 1;</span><br><span class="line">                y &gt;&gt;= 1;</span><br><span class="line">                ++factor;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> (x &lt;&lt; factor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;公约数的性质&quot;&gt;&lt;a href=&quot;#公约数的性质&quot; class=&quot;headerlink&quot; title=&quot;公约数的性质&quot;&gt;&lt;/a&gt;公约数的性质&lt;/h2&gt;&lt;p&gt;gcd(-a,b)=gcd(a,b)&lt;br&gt;gcd(a,0)=|a|&lt;br&gt;gcd(a,1)=1&lt;br&gt;gc</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="C++" scheme="https://liting1024.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI</title>
    <link href="https://liting1024.github.io/2020/01/28/SwiftUI/"/>
    <id>https://liting1024.github.io/2020/01/28/SwiftUI/</id>
    <published>2020-01-28T09:25:41.000Z</published>
    <updated>2020-01-28T09:25:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>ESE 提示可用的修饰</p><h1 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h1><h3 id="点击这个-调色网站"><a href="#点击这个-调色网站" class="headerlink" title="点击这个 调色网站"></a>点击这个 <a href="https://flatuicolors.com" target="_blank" rel="noopener">调色网站</a></h3><h3 id="点击这个-图像尺寸变更"><a href="#点击这个-图像尺寸变更" class="headerlink" title="点击这个 图像尺寸变更"></a>点击这个 <a href="https://appicon.co" target="_blank" rel="noopener">图像尺寸变更</a></h3><h3 id="点击这个-图标设计：（选择1024x1024像素）"><a href="#点击这个-图标设计：（选择1024x1024像素）" class="headerlink" title="点击这个 图标设计：（选择1024x1024像素）"></a>点击这个 <a href="https://www.canva.cn" target="_blank" rel="noopener">图标设计：（选择1024x1024像素）</a></h3><h3 id="点击这个阿里巴巴图标库"><a href="#点击这个阿里巴巴图标库" class="headerlink" title="点击这个阿里巴巴图标库"></a>点击这个<a href="https://www.iconfont.cn/home/index?spm=a313x.7781069.1998910419.2" target="_blank" rel="noopener">阿里巴巴图标库</a></h3><h1 id="SwiftUI内置控件"><a href="#SwiftUI内置控件" class="headerlink" title="SwiftUI内置控件"></a>SwiftUI内置控件</h1><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>HStack(alignment: .leading对齐方式，spacing：10该stack中控件之间的距离) 水平摆放<br>VStack 竖直摆放<br>ZStack 叠加摆放<br>Group 多屏幕展示（多在预览时使用，支持frame）</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="List（与ForEach用法相同，ForEach放在List里）"><a href="#List（与ForEach用法相同，ForEach放在List里）" class="headerlink" title="List（与ForEach用法相同，ForEach放在List里）"></a>List（与ForEach用法相同，ForEach放在List里）</h3><p>数组是继承Identifiable<br>List(0..&lt;5可放置数组）){ i in<br>}  列表<br>如果没有继承Identifiable的话，需要手动写id<br>List(数组.identified(by：.id)) {}<br>简单数组就可以用自身作为id<br>List([1,2,3].identified(by：.self)){}</p><h3 id="ScrollView-可滑动的列表，一般放在NavigitionView内"><a href="#ScrollView-可滑动的列表，一般放在NavigitionView内" class="headerlink" title="ScrollView 可滑动的列表，一般放在NavigitionView内"></a>ScrollView 可滑动的列表，一般放在NavigitionView内</h3><h3 id="NavigitionView-导航栏组件"><a href="#NavigitionView-导航栏组件" class="headerlink" title="NavigitionView 导航栏组件"></a>NavigitionView 导航栏组件</h3><p>NavigationLink(destination：跳转后的页面){ } 点击可跳转，写在NavigitionView里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//Navigition头部分，修饰写在NavigitionView里面</span><br><span class="line">.navigationBarTitle(Text(<span class="string">""</span>)，displayMode：.inline)字体的大小</span><br><span class="line">.navigationBarItems(trailing: Image( ))//可以放另一视图</span><br></pre></td></tr></table></figure><p>Form{<br>    Section(header:  小节题目内容){<br>    //小节内的内容<br>    }<br>    Section(header:  小节题目内容){<br>    //小节内的内容<br>    }<br>}</p><h2 id="文字、图片"><a href="#文字、图片" class="headerlink" title="文字、图片"></a>文字、图片</h2><p>Text(“”)</p><p>TextField(“”, text: $name) //@State private var name = “”</p><h4 id="修饰"><a href="#修饰" class="headerlink" title="修饰"></a>修饰</h4><p>.keyboardType() 弹出键盘类型<br>.numberPad和.decimalPad 两种键盘类型</p><p>SecureField</p><p>Image(system name: “ SF中的图标名称”)</p><h4 id="修饰语句："><a href="#修饰语句：" class="headerlink" title="修饰语句："></a>修饰语句：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.font( ) 字体样式</span><br><span class="line">.font(,system(size: )) 自定义字体大小</span><br><span class="line">.frame(width: ,height: ) 尺寸</span><br><span class="line">.foregroundColor(color: ) 颜色</span><br><span class="line">.offset(x: ,y: ) 偏移量（UIScreen.main.bounds.height屏幕的高度）</span><br><span class="line">.toggle( ) 在真假之间转换</span><br><span class="line">.imageScale(.large) 调整图片大小</span><br><span class="line">.aspectRatio(contentMode: .fit) 图片大小自适应屏幕，.fill是占满屏幕</span><br><span class="line">.frame(minWidth: 0,maxWidth: .infinith) 图片最小宽度为0，最大为无穷</span><br><span class="line">.cornerRadius( ) 圆角</span><br><span class="line">.clipShape(Circle()形状) 裁剪</span><br><span class="line">.overlay(Circle().stroke(Color.black, llineWidth: 5)描边的线) 覆盖的图案</span><br><span class="line">.shadow(radius: ) 阴影</span><br><span class="line">.tapAction&#123;</span><br><span class="line">点击后实现的代码，回调函数</span><br><span class="line">&#125; 轻触手势</span><br></pre></td></tr></table></figure><h2 id="动画类"><a href="#动画类" class="headerlink" title="动画类"></a>动画类</h2><h4 id="单个的动画（俩种同时都有时，单个动画优先展示）"><a href="#单个的动画（俩种同时都有时，单个动画优先展示）" class="headerlink" title="单个的动画（俩种同时都有时，单个动画优先展示）"></a>单个的动画（俩种同时都有时，单个动画优先展示）</h4><p>.transitiooon(.move(edge: .trailing)) 从边缘滑出<br>.rotationEffect 旋转<br>.rotation3DEffect(Angle(degrees: ), axis: (x: , y: , z: ))3D旋转<br>.animation(.spring()) 反弹动画<br>.animation(.basic(duration: 动画时间, curve: <u>.easeInoOut</u>)) 延迟动画  </p><h4 id="统一的动画"><a href="#统一的动画" class="headerlink" title="统一的动画"></a>统一的动画</h4><p>withAnimation(.basic基本动画(duration: 1动画时间)){<br>这里的值发生改变时，所有包含这个值的视图都加上了动画<br>}</p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>Button(action: {<br>  //点击后实现的代码<br>}) {<br>  //按钮样式<br>} </p><p>EditButton() 启用或禁用列表中项目的编辑模式<br>Toggle(isOn: $布尔值) {<br>Text(“ “)<br>} 开关按钮</p><h2 id="提示框"><a href="#提示框" class="headerlink" title="提示框"></a>提示框</h2><p>Alert </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">test</span>: View &#123;</span><br><span class="line">    @State private var editing = <span class="literal">false</span></span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        Button(action: &#123;</span><br><span class="line">            self.editing = <span class="literal">true</span></span><br><span class="line">        &#125;)&#123;</span><br><span class="line">            Text(<span class="string">"show it"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .alert(isPresented: <span class="variable">$editing</span>)&#123;</span><br><span class="line">        Alert(title: Text(<span class="string">"alert"</span>), message: Text(<span class="string">"easy"</span>),  primaryButton: .default(Text(<span class="string">"yes"</span>) ,action: &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"点了yes欧"</span>)</span><br><span class="line">                &#125;),  secondaryButton: .destructive(Text(<span class="string">"no"</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Modal<br>Popovers</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">test</span>: View &#123;</span><br><span class="line">    @State private var editing = <span class="literal">false</span></span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        Button(<span class="string">"show it"</span>)&#123;</span><br><span class="line">            self.editing = <span class="literal">true</span></span><br><span class="line">        &#125;.popover(isPresented: self.<span class="variable">$editing</span>, arrowEdge: .bottom) &#123;</span><br><span class="line">            Text(<span class="string">"hello, this is a new world"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sheet(和Popovers一模一样)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">test</span>: View &#123;</span><br><span class="line">    @State private var showingSheet = <span class="literal">false</span></span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        Button(<span class="string">"Show Sheet"</span>) &#123;</span><br><span class="line">            self.showingSheet.toggle()</span><br><span class="line">        &#125;</span><br><span class="line">        .sheet(isPresented: <span class="variable">$showingSheet</span>) &#123;</span><br><span class="line">            Text(<span class="string">"6"</span>)//也可以写成一个页面</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActionSheet</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">test</span>: View &#123;</span><br><span class="line">    @State private var editing = <span class="literal">false</span></span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        Button(action: &#123;</span><br><span class="line">            self.editing = <span class="literal">true</span></span><br><span class="line">        &#125;)&#123;</span><br><span class="line">            Text(<span class="string">"show it"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        .actionSheet(isPresented: <span class="variable">$editing</span>) &#123;</span><br><span class="line">            ActionSheet(title: Text(<span class="string">"确定吗?"</span>), message: Text(<span class="string">"此操作会。。。"</span>), buttons: [.destructive(Text(<span class="string">"确定"</span>)), .cancel(Text(<span class="string">"撤销"</span>))])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h4 id="DatePicker-“选择器的标题”-selection-选择器的值-displayedComponents-时间选择器"><a href="#DatePicker-“选择器的标题”-selection-选择器的值-displayedComponents-时间选择器" class="headerlink" title="DatePicker(“选择器的标题”,selection: 选择器的值, displayedComponents: ) 时间选择器"></a>DatePicker(“选择器的标题”,selection: 选择器的值, displayedComponents: ) 时间选择器</h4><h5 id="displayedComponents用来决定用户应该看到哪种选项："><a href="#displayedComponents用来决定用户应该看到哪种选项：" class="headerlink" title="displayedComponents用来决定用户应该看到哪种选项："></a>displayedComponents用来决定用户应该看到哪种选项：</h5><p>默认为月-日-星期-小时-分钟<br>.date 显示年-月-日<br>.hourAndMinute 显示小时-分钟</p><h4 id="Picker-“”-selection-选择器"><a href="#Picker-“”-selection-选择器" class="headerlink" title="Picker(“”,selection: ) 选择器"></a>Picker(“”,selection: ) 选择器</h4><p>.pickerStyle(SegmentedPickerStyle( )) 另一种风格的选择器<br>单个选择滚轮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">test</span>: View &#123;</span><br><span class="line">    var choice = [<span class="string">"food"</span>,<span class="string">"medicine"</span>,<span class="string">"cosmetics"</span>]</span><br><span class="line">    @State private var index = 0</span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        Picker(selection: <span class="variable">$index</span>, label: Text(<span class="string">"choose"</span>)) &#123;</span><br><span class="line">            ForEach (0..&lt;choice.count) &#123; i <span class="keyword">in</span></span><br><span class="line">                Text(self.choice[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个选择滚轮</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">struct <span class="built_in">test</span>: View &#123;</span><br><span class="line"></span><br><span class="line">    @State var data: [(String, [String])] = [</span><br><span class="line">        (<span class="string">"One"</span>, Array(0...5).map &#123; <span class="string">"\(<span class="variable">$0</span>)"</span> &#125;),</span><br><span class="line">        (<span class="string">"Two"</span>, Array(0...36).map &#123; <span class="string">"\(<span class="variable">$0</span>)"</span> &#125;),</span><br><span class="line">        (<span class="string">"Three"</span>, Array(0...365).map &#123; <span class="string">"\(<span class="variable">$0</span>)"</span> &#125;)</span><br><span class="line">    ]</span><br><span class="line">    @State var selection: [String] = [0, 0, 21].map &#123; <span class="string">"\(<span class="variable">$0</span>)"</span> &#125;</span><br><span class="line"></span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        VStack&#123;</span><br><span class="line">            Text(verbatim: <span class="string">"Selection: \(selection)"</span>)</span><br><span class="line">            MultiPicker(data: data, selection: <span class="variable">$selection</span>)</span><br><span class="line">            .frame(height: 300)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">struct MultiPicker: View  &#123;</span><br><span class="line"></span><br><span class="line">    typealias Label = String</span><br><span class="line">    typealias Entry = String</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> data: [ (Label, [Entry]) ]</span><br><span class="line">    @Binding var selection: [Entry]</span><br><span class="line"></span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        GeometryReader &#123; geometry <span class="keyword">in</span></span><br><span class="line">            HStack &#123;</span><br><span class="line">                ForEach(0..&lt;self.data.count) &#123; column <span class="keyword">in</span></span><br><span class="line">                    Picker(self.data[column].0, selection: self.<span class="variable">$selection</span>[column]) &#123;</span><br><span class="line">                        ForEach(0..&lt;self.data[column].1.count) &#123; row <span class="keyword">in</span></span><br><span class="line">                            Text(verbatim: self.data[column].1[row])</span><br><span class="line">                            .tag(self.data[column].1[row])</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    .pickerStyle(WheelPickerStyle())</span><br><span class="line">                    .frame(width: geometry.size.width / CGFloat(self.data.count), height: geometry.size.height)</span><br><span class="line">                    .clipped()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cornerRadius shadow foregroundColor background frame 都可以修饰选择器<br>.pickerStyle(SegmentedPickerStyle()) 可以把滚轮换成按钮<br>按钮也可以是图片</p><h2 id="图案形状"><a href="#图案形状" class="headerlink" title="图案形状"></a>图案形状</h2><p>Circle 圆形<br>Edge<br>Rectangle 好看的小方块<br>Path<br>RoundedRectangle </p><p>GeometryReader {  geometry in<br>   Text(“hello”)<br>       .frame(width: geometry.size.width)<br>}  计算屏幕大小的容器</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="属性包装器"><a href="#属性包装器" class="headerlink" title="属性包装器"></a>属性包装器</h2><p>未绑定属性就是公用状态<br>带上private表示只能在本结构体中使用，防止重名导致的崩溃<br>@State 值改变时，body内的内容重新刷新（双向绑定）<br>@Binding 将一个视图的属性链接到一些基础的模型数据<br>@ObservedObject 提取ObservableObject中储存的数据，所有页面共享数据<br>@Published 每当修改值时都会报告，willset{}可查看报告<br>@Environment(.Value) var Value 回到主页面<br>@EnvironmentObject 通过应用程序本身提供给视图，每个视图都可以读取的共享数据<br>.default 只实例化一次</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>Identifiable 可以自动生成一个唯一标识符var id = UUID()</p><h2 id="有用的View"><a href="#有用的View" class="headerlink" title="有用的View"></a>有用的View</h2><h3 id="地图View"><a href="#地图View" class="headerlink" title="地图View"></a>地图View</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import SwiftUI</span><br><span class="line">import MapKit</span><br><span class="line"></span><br><span class="line">struct MapView: UIViewRepresentable &#123;</span><br><span class="line">    </span><br><span class="line">    func makeUIView(context: Context) -&gt; MKMapView&#123;</span><br><span class="line">        MKMapView()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func updateUIView(_ uiView: MKMapView,context: Context)   &#123;</span><br><span class="line">        uiView.setRegion(MKCoordinateRegion(</span><br><span class="line">            center: CLLocationCoordinate2D( //经度纬度</span><br><span class="line">                latitude: 39.9087243,</span><br><span class="line">                longitude: 116.3952859</span><br><span class="line">                ),</span><br><span class="line">            span: MKCoordinateSpan(</span><br><span class="line">                latitudeDelta: 0.02,</span><br><span class="line">                longitudeDelta: 0.02)),//地图区域大小（比例尺大小）</span><br><span class="line">        animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct MapView_Previews: PreviewProvider &#123;</span><br><span class="line">    static var previews: some View &#123;</span><br><span class="line">        MapView()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用<a href="https://cocoapods.org" target="_blank" rel="noopener">第三方库</a></h1><h3 id="下载并安装Cocoapods的教程"><a href="#下载并安装Cocoapods的教程" class="headerlink" title="下载并安装Cocoapods的教程"></a><a href="https://juejin.im/post/5d8891a06fb9a06ad16fafba" target="_blank" rel="noopener">下载并安装Cocoapods</a>的教程</h3><h3 id="在APP中打开Podfile文件"><a href="#在APP中打开Podfile文件" class="headerlink" title="在APP中打开Podfile文件"></a>在APP中打开Podfile文件</h3><p>在end上一行，写pod ‘第三方库的名字’<br>点install<br><a href="https://juejin.im/post/5cbd44a85188250a8c22aae8" target="_blank" rel="noopener">库安装慢</a>的教程</p><h3 id="可以在Xcode中直接使用了"><a href="#可以在Xcode中直接使用了" class="headerlink" title="可以在Xcode中直接使用了"></a>可以在Xcode中直接使用了</h3><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><h4 id="CocoaPods-could-not-find-compatible-versions-for-pod-“URLImage”"><a href="#CocoaPods-could-not-find-compatible-versions-for-pod-“URLImage”" class="headerlink" title="[!] CocoaPods could not find compatible versions for pod “URLImage”:"></a>[!] CocoaPods could not find compatible versions for pod “URLImage”:</h4><p>解决方法：把.xcworkspace和Podfile.lock文件删除，重新pod install一下</p><h4 id="装库的速度慢"><a href="#装库的速度慢" class="headerlink" title="装库的速度慢"></a>装库的速度慢</h4><p>给终端挂上梯子，在ssr里找到HTTP代理设置<br>在终端任意文件夹中输入HTTP的监听地址和监听端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ESE 提示可用的修饰&lt;/p&gt;
&lt;h1 id=&quot;网站资源&quot;&gt;&lt;a href=&quot;#网站资源&quot; class=&quot;headerlink&quot; title=&quot;网站资源&quot;&gt;&lt;/a&gt;网站资源&lt;/h1&gt;&lt;h3 id=&quot;点击这个-调色网站&quot;&gt;&lt;a href=&quot;#点击这个-调色网站&quot; class=</summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="SwiftUI" scheme="https://liting1024.github.io/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Mac搭建个人Blog</title>
    <link href="https://liting1024.github.io/2020/01/28/mac%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/"/>
    <id>https://liting1024.github.io/2020/01/28/mac%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/</id>
    <published>2020-01-28T07:32:31.000Z</published>
    <updated>2020-01-28T07:32:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><h2 id="hexo创建一个blog"><a href="#hexo创建一个blog" class="headerlink" title="hexo创建一个blog"></a>hexo创建一个blog</h2><h3 id="终端的一些命令"><a href="#终端的一些命令" class="headerlink" title="终端的一些命令"></a>终端的一些命令</h3><p>注：终端中输入密码时不会显示<br><img src="/img/mac%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/1.png" alt="1"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br><span class="line">//查看此时所在位置</span><br><span class="line">mkdir blog</span><br><span class="line">//创建blog文件夹</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">//返回上一层目录</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">//进入blog文件夹</span><br></pre></td></tr></table></figure><p><img src="/img/mac%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/2.png" alt="2"></p><h3 id="输入sudo-hexo-init-创建博客"><a href="#输入sudo-hexo-init-创建博客" class="headerlink" title="输入sudo hexo init 创建博客"></a>输入sudo hexo init 创建博客</h3><p><img src="/img/mac%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/3.png" alt="3"></p><h2 id="如何使用hexo"><a href="#如何使用hexo" class="headerlink" title="如何使用hexo"></a>如何使用hexo</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post XXX</span><br></pre></td></tr></table></figure><h3 id="创建新目录"><a href="#创建新目录" class="headerlink" title="创建新目录"></a>创建新目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tag</span><br></pre></td></tr></table></figure><p>前往blog/source/tag文件夹中更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: XXX</span><br><span class="line">lyout: tag</span><br><span class="line">date: 2020-02-02 13:07:16</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="创建新标签"><a href="#创建新标签" class="headerlink" title="创建新标签"></a>创建新标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page category</span><br></pre></td></tr></table></figure><p>同理把tag改为category即可</p><h3 id="about页面"><a href="#about页面" class="headerlink" title="about页面"></a>about页面</h3><p>除了不支持Categories和Tags外和写文章的格式一样<br>一般不需要新建页面，只更改blog/source/about/index.md即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><h2 id="推送至github和coding-net"><a href="#推送至github和coding-net" class="headerlink" title="推送至github和coding.net"></a>推送至github和coding.net</h2><h4 id="比较github（国外）和coding（腾讯）"><a href="#比较github（国外）和coding（腾讯）" class="headerlink" title="比较github（国外）和coding（腾讯）"></a>比较github（国外）和coding（腾讯）</h4><table><thead><tr><th></th><th>github</th><th>coding.net</th></tr></thead><tbody><tr><td>域名</td><td>自定义</td><td>随机生成</td></tr><tr><td>加载速度</td><td>慢</td><td>快一些</td></tr><tr><td>方便的clone方式</td><td>HTTPS</td><td>SSH</td></tr></tbody></table><h2 id="如何使用hexo-1"><a href="#如何使用hexo-1" class="headerlink" title="如何使用hexo"></a>如何使用hexo</h2><h3 id="创建新文章-1"><a href="#创建新文章-1" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post XXX</span><br></pre></td></tr></table></figure><h3 id="创建新目录-1"><a href="#创建新目录-1" class="headerlink" title="创建新目录"></a>创建新目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tag</span><br></pre></td></tr></table></figure><p>前往blog/source/tag文件夹中更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: XXX</span><br><span class="line">lyout: tag</span><br><span class="line">date: 2020-02-02 13:07:16</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="创建新标签-1"><a href="#创建新标签-1" class="headerlink" title="创建新标签"></a>创建新标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page category</span><br></pre></td></tr></table></figure><p>同理把tag改为category即可</p><h3 id="about页面-1"><a href="#about页面-1" class="headerlink" title="about页面"></a>about页面</h3><p>除了不支持Categories和Tags外和写文章的格式一样<br>一般不需要新建页面，只更改blog/source/about/index.md即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><h1 id="进阶部分"><a href="#进阶部分" class="headerlink" title="进阶部分"></a>进阶部分</h1><h2 id="如何在百度中搜索到自己写的博客内容"><a href="#如何在百度中搜索到自己写的博客内容" class="headerlink" title="如何在百度中搜索到自己写的博客内容"></a>如何在百度中搜索到自己写的博客内容</h2><p>必须在<a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">这里提交</a>自己的博客链接才能在百度引擎中搜索到的</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><h3 id="在-Hexo-中下载主题"><a href="#在-Hexo-中下载主题" class="headerlink" title="在 Hexo  中下载主题"></a>在<a href="https://hexo.io/" target="_blank" rel="noopener"> Hexo </a> 中下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com.....主题地址 themes/主题名字</span><br><span class="line">//将主题下载到themes中</span><br></pre></td></tr></table></figure><h3 id="更改theme中的-config-yml"><a href="#更改theme中的-config-yml" class="headerlink" title="更改theme中的_config.yml"></a>更改theme中的_config.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml 进入编辑模式（注意空格）</span><br><span class="line">按 A 开始编辑</span><br><span class="line">按 esc 退出编辑</span><br><span class="line">输入 :wq 保存并退出</span><br></pre></td></tr></table></figure><p><img src="/img/mac%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAblog/4.png" alt="4"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean 清除缓存</span><br><span class="line">hexo g 搭建   </span><br><span class="line">hexo d 提交到github</span><br></pre></td></tr></table></figure><h1 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h1><h2 id="hexo-g-失败"><a href="#hexo-g-失败" class="headerlink" title="hexo g 失败"></a>hexo g 失败</h2><p>TypeError [ERR_INVALID_URL]: Invalid URL: http: //127.0.0.1:1085;export<br>    at onParseError (internal/url.js:243:9)</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这个原因呢也很简单，就是hexo升级到4.2后，对于文章内的url自动变成html的A标签的解析引擎有点小bug，这是我在一个github的issue中看到的，issue链接我就不贴出来了,有兴趣的自行用英文关键字进行Google吧。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>把http://这个协议头去掉，不过经过测试发现hexo自动生成的链接会有点其它的小bug，大家可以自行测试一下</li><li>在http://的冒号后面加个空格</li><li>把这个url用两个``给引起来，这种方法我感觉最好</li></ul><p>本博客主题为<a href="https://github.com/Siricee/hexo-theme-Chic/blob/master/README-CN.md" target="_blank" rel="noopener">Chic</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础部分&quot;&gt;&lt;a href=&quot;#基础部分&quot; class=&quot;headerlink&quot; title=&quot;基础部分&quot;&gt;&lt;/a&gt;基础部分&lt;/h1&gt;&lt;h2 id=&quot;hexo创建一个blog&quot;&gt;&lt;a href=&quot;#hexo创建一个blog&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Program" scheme="https://liting1024.github.io/categories/Program/"/>
    
    
    <category term="blog" scheme="https://liting1024.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Markdown写作格式</title>
    <link href="https://liting1024.github.io/2020/01/28/%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/"/>
    <id>https://liting1024.github.io/2020/01/28/%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/</id>
    <published>2020-01-28T04:27:53.614Z</published>
    <updated>2020-01-28T04:27:53.614Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><p>（#一到六个可以表示一到六级标题）</p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片标示，可以不写](图片地址)</span><br></pre></td></tr></table></figure><p>段落换行是使用两个以上空格加上回车<br><img src="/img/%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/1.png" alt="1"></p><p>字体<br><em>斜体</em><br><em>斜体</em><br><strong>粗体</strong><br><strong>粗体</strong><br><strong><em>粗斜体</em></strong><br><strong><em>粗斜体</em></strong></p><blockquote><p>这是引用</p></blockquote><pre><code>在第二行打四个空格就会有 花里胡哨的字体</code></pre><p><u>下划线文本</u><br><img src="/img/%E5%86%99%E4%BD%9C%E6%A0%BC%E5%BC%8F/2.png" alt="2"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|  表头  | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line"></span><br><span class="line">//必须多加一行回车，否则会影响后面的内容</span><br></pre></td></tr></table></figure><h4 id="设置对齐方式"><a href="#设置对齐方式" class="headerlink" title="设置对齐方式"></a>设置对齐方式</h4><p>-:右对齐<br>:-左对齐<br>:-:居中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th><th></th><th></th><th></th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td><td></td><td></td><td></td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr><tr><td align="left"></td><td align="right"></td><td align="center"></td><td></td><td></td><td></td></tr></tbody></table><h2 id="如何使用hexo"><a href="#如何使用hexo" class="headerlink" title="如何使用hexo"></a>如何使用hexo</h2><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post XXX</span><br></pre></td></tr></table></figure><h3 id="创建新目录"><a href="#创建新目录" class="headerlink" title="创建新目录"></a>创建新目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tag</span><br></pre></td></tr></table></figure><p>前往blog/source/tag文件夹中更改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: XXX</span><br><span class="line">lyout: tag</span><br><span class="line">date: 2020-02-02 13:07:16</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="创建新标签"><a href="#创建新标签" class="headerlink" title="创建新标签"></a>创建新标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page category</span><br></pre></td></tr></table></figure><p>同理把tag改为category即可</p><h2 id="hexo-发文语句"><a href="#hexo-发文语句" class="headerlink" title="hexo 发文语句"></a>hexo 发文语句</h2><h3 id="New-a-post"><a href="#New-a-post" class="headerlink" title="New a post"></a>New a post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">//这里是代码</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
    <category term="blog" scheme="https://liting1024.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
